/* automatically generated by rust-bindgen */

// bindgen output was modified manually

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl <T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl <T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl <T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __IncompleteArrayField<T> { }
pub const __WORDSIZE: ::libc::c_uint = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::libc::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::libc::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::libc::c_uint = 1;
pub const __DARWIN_UNIX03: ::libc::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::libc::c_uint = 1;
pub const __DARWIN_VERS_1050: ::libc::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: ::libc::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: ::libc::c_uint = 4096;
pub const __DARWIN_C_FULL: ::libc::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::libc::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::libc::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::libc::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::libc::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::libc::c_uint = 3;
pub const __PTHREAD_SIZE__: ::libc::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::libc::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::libc::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::libc::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::libc::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: ::libc::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: ::libc::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::libc::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::libc::c_uint = 16;
pub const INT8_MAX: ::libc::c_uint = 127;
pub const INT16_MAX: ::libc::c_uint = 32767;
pub const INT32_MAX: ::libc::c_uint = 2147483647;
pub const INT64_MAX: ::libc::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: ::libc::c_int = -128;
pub const INT16_MIN: ::libc::c_int = -32768;
pub const INT32_MIN: ::libc::c_int = -2147483648;
pub const INT64_MIN: ::libc::c_longlong = -9223372036854775808;
pub const UINT8_MAX: ::libc::c_uint = 255;
pub const UINT16_MAX: ::libc::c_uint = 65535;
pub const UINT32_MAX: ::libc::c_uint = 4294967295;
pub const UINT64_MAX: ::libc::c_int = -1;
pub const INT_LEAST8_MIN: ::libc::c_int = -128;
pub const INT_LEAST16_MIN: ::libc::c_int = -32768;
pub const INT_LEAST32_MIN: ::libc::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::libc::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::libc::c_uint = 127;
pub const INT_LEAST16_MAX: ::libc::c_uint = 32767;
pub const INT_LEAST32_MAX: ::libc::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::libc::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::libc::c_uint = 255;
pub const UINT_LEAST16_MAX: ::libc::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::libc::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::libc::c_int = -1;
pub const INT_FAST8_MIN: ::libc::c_int = -128;
pub const INT_FAST16_MIN: ::libc::c_int = -32768;
pub const INT_FAST32_MIN: ::libc::c_int = -2147483648;
pub const INT_FAST64_MIN: ::libc::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::libc::c_uint = 127;
pub const INT_FAST16_MAX: ::libc::c_uint = 32767;
pub const INT_FAST32_MAX: ::libc::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::libc::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::libc::c_uint = 255;
pub const UINT_FAST16_MAX: ::libc::c_uint = 65535;
pub const UINT_FAST32_MAX: ::libc::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::libc::c_int = -1;
pub const INTPTR_MIN: ::libc::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::libc::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::libc::c_int = -1;
pub const INTMAX_MIN: ::libc::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::libc::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::libc::c_int = -1;
pub const PTRDIFF_MIN: ::libc::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::libc::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::libc::c_int = -1;
pub const RSIZE_MAX: ::libc::c_int = -1;
pub const WINT_MIN: ::libc::c_int = -2147483648;
pub const WINT_MAX: ::libc::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::libc::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::libc::c_uint = 2147483647;
pub const TRUE: ::libc::c_uint = 1;
pub const FALSE: ::libc::c_uint = 0;
pub const BYTE_SIZE: ::libc::c_uint = 8;
pub const I386_PGBYTES: ::libc::c_uint = 4096;
pub const I386_PGSHIFT: ::libc::c_uint = 12;
pub const PAGE_SIZE: ::libc::c_uint = 4096;
pub const PAGE_SHIFT: ::libc::c_uint = 12;
pub const PAGE_MASK: ::libc::c_uint = 4095;
pub const PAGE_MAX_SHIFT: ::libc::c_uint = 12;
pub const PAGE_MAX_SIZE: ::libc::c_uint = 4096;
pub const PAGE_MAX_MASK: ::libc::c_uint = 4095;
pub const PAGE_MIN_SHIFT: ::libc::c_uint = 12;
pub const PAGE_MIN_SIZE: ::libc::c_uint = 4096;
pub const PAGE_MIN_MASK: ::libc::c_uint = 4095;
pub const I386_LPGBYTES: ::libc::c_uint = 2097152;
pub const I386_LPGSHIFT: ::libc::c_uint = 21;
pub const I386_LPGMASK: ::libc::c_uint = 2097151;
pub const MACH_PORT_NULL: ::libc::c_uint = 0;
pub const MACH_PORT_TYPE_DNREQUEST: ::libc::c_uint = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: ::libc::c_uint = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: ::libc::c_uint = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: ::libc::c_uint = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: ::libc::c_uint = 1;
pub const MACH_PORT_QLIMIT_ZERO: ::libc::c_uint = 0;
pub const MACH_PORT_QLIMIT_BASIC: ::libc::c_uint = 5;
pub const MACH_PORT_QLIMIT_SMALL: ::libc::c_uint = 16;
pub const MACH_PORT_QLIMIT_LARGE: ::libc::c_uint = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: ::libc::c_uint = 65534;
pub const MACH_PORT_QLIMIT_MIN: ::libc::c_uint = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: ::libc::c_uint = 5;
pub const MACH_PORT_QLIMIT_MAX: ::libc::c_uint = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: ::libc::c_uint = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: ::libc::c_uint = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: ::libc::c_uint = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: ::libc::c_uint = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: ::libc::c_uint = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: ::libc::c_uint = 32;
pub const MACH_PORT_LIMITS_INFO: ::libc::c_uint = 1;
pub const MACH_PORT_RECEIVE_STATUS: ::libc::c_uint = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: ::libc::c_uint = 3;
pub const MACH_PORT_TEMPOWNER: ::libc::c_uint = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: ::libc::c_uint = 5;
pub const MACH_PORT_DENAP_RECEIVER: ::libc::c_uint = 6;
pub const MACH_PORT_INFO_EXT: ::libc::c_uint = 7;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: ::libc::c_uint = 1;
pub const MPO_CONTEXT_AS_GUARD: ::libc::c_uint = 1;
pub const MPO_QLIMIT: ::libc::c_uint = 2;
pub const MPO_TEMPOWNER: ::libc::c_uint = 4;
pub const MPO_IMPORTANCE_RECEIVER: ::libc::c_uint = 8;
pub const MPO_INSERT_SEND_RIGHT: ::libc::c_uint = 16;
pub const MPO_STRICT: ::libc::c_uint = 32;
pub const MPO_DENAP_RECEIVER: ::libc::c_uint = 64;
pub const GUARD_TYPE_MACH_PORT: ::libc::c_uint = 1;
pub const PPNUM_MAX: ::libc::c_uint = 4294967295;
pub const __MAC_10_0: ::libc::c_uint = 1000;
pub const __MAC_10_1: ::libc::c_uint = 1010;
pub const __MAC_10_2: ::libc::c_uint = 1020;
pub const __MAC_10_3: ::libc::c_uint = 1030;
pub const __MAC_10_4: ::libc::c_uint = 1040;
pub const __MAC_10_5: ::libc::c_uint = 1050;
pub const __MAC_10_6: ::libc::c_uint = 1060;
pub const __MAC_10_7: ::libc::c_uint = 1070;
pub const __MAC_10_8: ::libc::c_uint = 1080;
pub const __MAC_10_9: ::libc::c_uint = 1090;
pub const __MAC_10_10: ::libc::c_uint = 101000;
pub const __MAC_10_10_2: ::libc::c_uint = 101002;
pub const __MAC_10_10_3: ::libc::c_uint = 101003;
pub const __MAC_10_11: ::libc::c_uint = 101100;
pub const __MAC_10_11_2: ::libc::c_uint = 101102;
pub const __MAC_10_11_3: ::libc::c_uint = 101103;
pub const __MAC_10_11_4: ::libc::c_uint = 101104;
pub const __IPHONE_2_0: ::libc::c_uint = 20000;
pub const __IPHONE_2_1: ::libc::c_uint = 20100;
pub const __IPHONE_2_2: ::libc::c_uint = 20200;
pub const __IPHONE_3_0: ::libc::c_uint = 30000;
pub const __IPHONE_3_1: ::libc::c_uint = 30100;
pub const __IPHONE_3_2: ::libc::c_uint = 30200;
pub const __IPHONE_4_0: ::libc::c_uint = 40000;
pub const __IPHONE_4_1: ::libc::c_uint = 40100;
pub const __IPHONE_4_2: ::libc::c_uint = 40200;
pub const __IPHONE_4_3: ::libc::c_uint = 40300;
pub const __IPHONE_5_0: ::libc::c_uint = 50000;
pub const __IPHONE_5_1: ::libc::c_uint = 50100;
pub const __IPHONE_6_0: ::libc::c_uint = 60000;
pub const __IPHONE_6_1: ::libc::c_uint = 60100;
pub const __IPHONE_7_0: ::libc::c_uint = 70000;
pub const __IPHONE_7_1: ::libc::c_uint = 70100;
pub const __IPHONE_8_0: ::libc::c_uint = 80000;
pub const __IPHONE_8_1: ::libc::c_uint = 80100;
pub const __IPHONE_8_2: ::libc::c_uint = 80200;
pub const __IPHONE_8_3: ::libc::c_uint = 80300;
pub const __IPHONE_8_4: ::libc::c_uint = 80400;
pub const __IPHONE_9_0: ::libc::c_uint = 90000;
pub const __IPHONE_9_1: ::libc::c_uint = 90100;
pub const __IPHONE_9_2: ::libc::c_uint = 90200;
pub const __IPHONE_9_3: ::libc::c_uint = 90300;
pub const __TVOS_9_0: ::libc::c_uint = 90000;
pub const __TVOS_9_1: ::libc::c_uint = 90100;
pub const __TVOS_9_2: ::libc::c_uint = 90200;
pub const __WATCHOS_1_0: ::libc::c_uint = 10000;
pub const __WATCHOS_2_0: ::libc::c_uint = 20000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: ::libc::c_uint = 101104;
pub const MACH_MSGH_BITS_ZERO: ::libc::c_uint = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: ::libc::c_uint = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: ::libc::c_uint = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: ::libc::c_uint = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: ::libc::c_uint = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: ::libc::c_uint = 2147483648;
pub const MACH_MSGH_BITS_USER: ::libc::c_uint = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: ::libc::c_uint = 536870912;
pub const MACH_MSGH_BITS_DENAP: ::libc::c_uint = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: ::libc::c_uint = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: ::libc::c_uint = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: ::libc::c_uint = 268435456;
pub const MACH_MSGH_BITS_USED: ::libc::c_uint = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: ::libc::c_uint = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: ::libc::c_uint = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: ::libc::c_uint = 18;
pub const MACH_MSG_TYPE_COPY_SEND: ::libc::c_uint = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: ::libc::c_uint = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: ::libc::c_uint = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: ::libc::c_uint = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: ::libc::c_uint = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: ::libc::c_uint = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: ::libc::c_uint = 26;
pub const MACH_MSG_PHYSICAL_COPY: ::libc::c_uint = 0;
pub const MACH_MSG_VIRTUAL_COPY: ::libc::c_uint = 1;
pub const MACH_MSG_ALLOCATE: ::libc::c_uint = 2;
pub const MACH_MSG_OVERWRITE: ::libc::c_uint = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: ::libc::c_uint = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: ::libc::c_uint = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: ::libc::c_uint = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: ::libc::c_uint = 3;
pub const MACH_MSG_TRAILER_FORMAT_0: ::libc::c_uint = 0;
pub const MACH_MSGH_KIND_NORMAL: ::libc::c_uint = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: ::libc::c_uint = 1;
pub const MACH_MSG_TYPE_PORT_NONE: ::libc::c_uint = 0;
pub const MACH_MSG_TYPE_PORT_NAME: ::libc::c_uint = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: ::libc::c_uint = 16;
pub const MACH_MSG_TYPE_PORT_SEND: ::libc::c_uint = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: ::libc::c_uint = 18;
pub const MACH_MSG_TYPE_LAST: ::libc::c_uint = 22;
pub const MACH_MSG_OPTION_NONE: ::libc::c_uint = 0;
pub const MACH_SEND_MSG: ::libc::c_uint = 1;
pub const MACH_RCV_MSG: ::libc::c_uint = 2;
pub const MACH_RCV_LARGE: ::libc::c_uint = 4;
pub const MACH_RCV_LARGE_IDENTITY: ::libc::c_uint = 8;
pub const MACH_SEND_TIMEOUT: ::libc::c_uint = 16;
pub const MACH_SEND_INTERRUPT: ::libc::c_uint = 64;
pub const MACH_SEND_NOTIFY: ::libc::c_uint = 128;
pub const MACH_SEND_ALWAYS: ::libc::c_uint = 65536;
pub const MACH_SEND_TRAILER: ::libc::c_uint = 131072;
pub const MACH_SEND_NOIMPORTANCE: ::libc::c_uint = 262144;
pub const MACH_SEND_NODENAP: ::libc::c_uint = 262144;
pub const MACH_SEND_IMPORTANCE: ::libc::c_uint = 524288;
pub const MACH_RCV_TIMEOUT: ::libc::c_uint = 256;
pub const MACH_RCV_NOTIFY: ::libc::c_uint = 512;
pub const MACH_RCV_INTERRUPT: ::libc::c_uint = 1024;
pub const MACH_RCV_VOUCHER: ::libc::c_uint = 2048;
pub const MACH_RCV_OVERWRITE: ::libc::c_uint = 4096;
pub const MACH_RCV_TRAILER_NULL: ::libc::c_uint = 0;
pub const MACH_RCV_TRAILER_SEQNO: ::libc::c_uint = 1;
pub const MACH_RCV_TRAILER_SENDER: ::libc::c_uint = 2;
pub const MACH_RCV_TRAILER_AUDIT: ::libc::c_uint = 3;
pub const MACH_RCV_TRAILER_CTX: ::libc::c_uint = 4;
pub const MACH_RCV_TRAILER_AV: ::libc::c_uint = 7;
pub const MACH_RCV_TRAILER_LABELS: ::libc::c_uint = 8;
pub const MACH_RCV_TRAILER_MASK: ::libc::c_uint = 251658240;
pub const MACH_MSG_SUCCESS: ::libc::c_uint = 0;
pub const MACH_MSG_MASK: ::libc::c_uint = 15872;
pub const MACH_MSG_IPC_SPACE: ::libc::c_uint = 8192;
pub const MACH_MSG_VM_SPACE: ::libc::c_uint = 4096;
pub const MACH_MSG_IPC_KERNEL: ::libc::c_uint = 2048;
pub const MACH_MSG_VM_KERNEL: ::libc::c_uint = 1024;
pub const MACH_SEND_IN_PROGRESS: ::libc::c_uint = 268435457;
pub const MACH_SEND_INVALID_DATA: ::libc::c_uint = 268435458;
pub const MACH_SEND_INVALID_DEST: ::libc::c_uint = 268435459;
pub const MACH_SEND_TIMED_OUT: ::libc::c_uint = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: ::libc::c_uint = 268435461;
pub const MACH_SEND_INTERRUPTED: ::libc::c_uint = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: ::libc::c_uint = 268435464;
pub const MACH_SEND_INVALID_REPLY: ::libc::c_uint = 268435465;
pub const MACH_SEND_INVALID_RIGHT: ::libc::c_uint = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: ::libc::c_uint = 268435467;
pub const MACH_SEND_INVALID_MEMORY: ::libc::c_uint = 268435468;
pub const MACH_SEND_NO_BUFFER: ::libc::c_uint = 268435469;
pub const MACH_SEND_TOO_LARGE: ::libc::c_uint = 268435470;
pub const MACH_SEND_INVALID_TYPE: ::libc::c_uint = 268435471;
pub const MACH_SEND_INVALID_HEADER: ::libc::c_uint = 268435472;
pub const MACH_SEND_INVALID_TRAILER: ::libc::c_uint = 268435473;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: ::libc::c_uint = 268435477;
pub const MACH_RCV_IN_PROGRESS: ::libc::c_uint = 268451841;
pub const MACH_RCV_INVALID_NAME: ::libc::c_uint = 268451842;
pub const MACH_RCV_TIMED_OUT: ::libc::c_uint = 268451843;
pub const MACH_RCV_TOO_LARGE: ::libc::c_uint = 268451844;
pub const MACH_RCV_INTERRUPTED: ::libc::c_uint = 268451845;
pub const MACH_RCV_PORT_CHANGED: ::libc::c_uint = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: ::libc::c_uint = 268451847;
pub const MACH_RCV_INVALID_DATA: ::libc::c_uint = 268451848;
pub const MACH_RCV_PORT_DIED: ::libc::c_uint = 268451849;
pub const MACH_RCV_IN_SET: ::libc::c_uint = 268451850;
pub const MACH_RCV_HEADER_ERROR: ::libc::c_uint = 268451851;
pub const MACH_RCV_BODY_ERROR: ::libc::c_uint = 268451852;
pub const MACH_RCV_INVALID_TYPE: ::libc::c_uint = 268451853;
pub const MACH_RCV_SCATTER_SMALL: ::libc::c_uint = 268451854;
pub const MACH_RCV_INVALID_TRAILER: ::libc::c_uint = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: ::libc::c_uint = 268451857;
pub const VM_PAGE_QUERY_PAGE_PRESENT: ::libc::c_uint = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: ::libc::c_uint = 2;
pub const VM_PAGE_QUERY_PAGE_REF: ::libc::c_uint = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: ::libc::c_uint = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: ::libc::c_uint = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: ::libc::c_uint = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: ::libc::c_uint = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: ::libc::c_uint = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: ::libc::c_uint = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: ::libc::c_uint = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: ::libc::c_uint = 1024;
pub const VM_FLAGS_FIXED: ::libc::c_uint = 0;
pub const VM_FLAGS_ANYWHERE: ::libc::c_uint = 1;
pub const VM_FLAGS_PURGABLE: ::libc::c_uint = 2;
pub const VM_FLAGS_NO_CACHE: ::libc::c_uint = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: ::libc::c_uint = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: ::libc::c_uint = 64;
pub const VM_FLAGS_OVERWRITE: ::libc::c_uint = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: ::libc::c_uint = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: ::libc::c_uint = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: ::libc::c_uint = 8388608;
pub const VM_FLAGS_ALIAS_MASK: ::libc::c_uint = 4278190080;
pub const VM_FLAGS_USER_ALLOCATE: ::libc::c_uint = 4278665235;
pub const VM_FLAGS_USER_MAP: ::libc::c_uint = 4288102419;
pub const VM_FLAGS_USER_REMAP: ::libc::c_uint = 1064993;
pub const VM_FLAGS_SUPERPAGE_SHIFT: ::libc::c_uint = 16;
pub const SUPERPAGE_NONE: ::libc::c_uint = 0;
pub const SUPERPAGE_SIZE_ANY: ::libc::c_uint = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: ::libc::c_uint = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: ::libc::c_uint = 65536;
pub const SUPERPAGE_SIZE_2MB: ::libc::c_uint = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: ::libc::c_uint = 131072;
pub const VM_MEMORY_MALLOC: ::libc::c_uint = 1;
pub const VM_MEMORY_MALLOC_SMALL: ::libc::c_uint = 2;
pub const VM_MEMORY_MALLOC_LARGE: ::libc::c_uint = 3;
pub const VM_MEMORY_MALLOC_HUGE: ::libc::c_uint = 4;
pub const VM_MEMORY_SBRK: ::libc::c_uint = 5;
pub const VM_MEMORY_REALLOC: ::libc::c_uint = 6;
pub const VM_MEMORY_MALLOC_TINY: ::libc::c_uint = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: ::libc::c_uint = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: ::libc::c_uint = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: ::libc::c_uint = 10;
pub const VM_MEMORY_MALLOC_NANO: ::libc::c_uint = 11;
pub const VM_MEMORY_MACH_MSG: ::libc::c_uint = 20;
pub const VM_MEMORY_IOKIT: ::libc::c_uint = 21;
pub const VM_MEMORY_STACK: ::libc::c_uint = 30;
pub const VM_MEMORY_GUARD: ::libc::c_uint = 31;
pub const VM_MEMORY_SHARED_PMAP: ::libc::c_uint = 32;
pub const VM_MEMORY_DYLIB: ::libc::c_uint = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: ::libc::c_uint = 34;
pub const VM_MEMORY_UNSHARED_PMAP: ::libc::c_uint = 35;
pub const VM_MEMORY_APPKIT: ::libc::c_uint = 40;
pub const VM_MEMORY_FOUNDATION: ::libc::c_uint = 41;
pub const VM_MEMORY_COREGRAPHICS: ::libc::c_uint = 42;
pub const VM_MEMORY_CORESERVICES: ::libc::c_uint = 43;
pub const VM_MEMORY_CARBON: ::libc::c_uint = 43;
pub const VM_MEMORY_JAVA: ::libc::c_uint = 44;
pub const VM_MEMORY_COREDATA: ::libc::c_uint = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: ::libc::c_uint = 46;
pub const VM_MEMORY_ATS: ::libc::c_uint = 50;
pub const VM_MEMORY_LAYERKIT: ::libc::c_uint = 51;
pub const VM_MEMORY_CGIMAGE: ::libc::c_uint = 52;
pub const VM_MEMORY_TCMALLOC: ::libc::c_uint = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: ::libc::c_uint = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: ::libc::c_uint = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: ::libc::c_uint = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: ::libc::c_uint = 57;
pub const VM_MEMORY_COREGRAPHICS_MISC: ::libc::c_uint = 42;
pub const VM_MEMORY_DYLD: ::libc::c_uint = 60;
pub const VM_MEMORY_DYLD_MALLOC: ::libc::c_uint = 61;
pub const VM_MEMORY_SQLITE: ::libc::c_uint = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: ::libc::c_uint = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: ::libc::c_uint = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: ::libc::c_uint = 65;
pub const VM_MEMORY_GLSL: ::libc::c_uint = 66;
pub const VM_MEMORY_OPENCL: ::libc::c_uint = 67;
pub const VM_MEMORY_COREIMAGE: ::libc::c_uint = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: ::libc::c_uint = 69;
pub const VM_MEMORY_IMAGEIO: ::libc::c_uint = 70;
pub const VM_MEMORY_COREPROFILE: ::libc::c_uint = 71;
pub const VM_MEMORY_ASSETSD: ::libc::c_uint = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: ::libc::c_uint = 73;
pub const VM_MEMORY_LIBDISPATCH: ::libc::c_uint = 74;
pub const VM_MEMORY_ACCELERATE: ::libc::c_uint = 75;
pub const VM_MEMORY_COREUI: ::libc::c_uint = 76;
pub const VM_MEMORY_COREUIFILE: ::libc::c_uint = 77;
pub const VM_MEMORY_GENEALOGY: ::libc::c_uint = 78;
pub const VM_MEMORY_RAWCAMERA: ::libc::c_uint = 79;
pub const VM_MEMORY_CORPSEINFO: ::libc::c_uint = 80;
pub const VM_MEMORY_ASL: ::libc::c_uint = 81;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: ::libc::c_uint = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: ::libc::c_uint = 255;
pub const CPU_STATE_MAX: ::libc::c_uint = 4;
pub const CPU_STATE_USER: ::libc::c_uint = 0;
pub const CPU_STATE_SYSTEM: ::libc::c_uint = 1;
pub const CPU_STATE_IDLE: ::libc::c_uint = 2;
pub const CPU_STATE_NICE: ::libc::c_uint = 3;
pub const CPU_ARCH_MASK: ::libc::c_uint = 4278190080;
pub const CPU_ARCH_ABI64: ::libc::c_uint = 16777216;
pub const CPU_SUBTYPE_MASK: ::libc::c_uint = 4278190080;
pub const CPU_SUBTYPE_LIB64: ::libc::c_uint = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: ::libc::c_uint = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: ::libc::c_uint = 0;
pub const CPUFAMILY_UNKNOWN: ::libc::c_uint = 0;
pub const CPUFAMILY_POWERPC_G3: ::libc::c_uint = 3471054153;
pub const CPUFAMILY_POWERPC_G4: ::libc::c_uint = 2009171118;
pub const CPUFAMILY_POWERPC_G5: ::libc::c_uint = 3983988906;
pub const CPUFAMILY_INTEL_6_13: ::libc::c_uint = 2855483691;
pub const CPUFAMILY_INTEL_YONAH: ::libc::c_uint = 1943433984;
pub const CPUFAMILY_INTEL_MEROM: ::libc::c_uint = 1114597871;
pub const CPUFAMILY_INTEL_PENRYN: ::libc::c_uint = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: ::libc::c_uint = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: ::libc::c_uint = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: ::libc::c_uint = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: ::libc::c_uint = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: ::libc::c_uint = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: ::libc::c_uint = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: ::libc::c_uint = 939270559;
pub const CPUFAMILY_ARM_9: ::libc::c_uint = 3878847406;
pub const CPUFAMILY_ARM_11: ::libc::c_uint = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: ::libc::c_uint = 1404044789;
pub const CPUFAMILY_ARM_12: ::libc::c_uint = 3172666089;
pub const CPUFAMILY_ARM_13: ::libc::c_uint = 214503012;
pub const CPUFAMILY_ARM_14: ::libc::c_uint = 2517073649;
pub const CPUFAMILY_ARM_15: ::libc::c_uint = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: ::libc::c_uint = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: ::libc::c_uint = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: ::libc::c_uint = 747742334;
pub const CPUFAMILY_ARM_TWISTER: ::libc::c_uint = 2465937352;
pub const CPUFAMILY_INTEL_6_14: ::libc::c_uint = 1943433984;
pub const CPUFAMILY_INTEL_6_15: ::libc::c_uint = 1114597871;
pub const CPUFAMILY_INTEL_6_23: ::libc::c_uint = 2028621756;
pub const CPUFAMILY_INTEL_6_26: ::libc::c_uint = 1801080018;
pub const CPUFAMILY_INTEL_CORE: ::libc::c_uint = 1943433984;
pub const CPUFAMILY_INTEL_CORE2: ::libc::c_uint = 1114597871;
pub const TIME_MICROS_MAX: ::libc::c_uint = 1000000;
pub const HOST_INFO_MAX: ::libc::c_uint = 1024;
pub const KERNEL_VERSION_MAX: ::libc::c_uint = 512;
pub const KERNEL_BOOT_INFO_MAX: ::libc::c_uint = 4096;
pub const HOST_BASIC_INFO: ::libc::c_uint = 1;
pub const HOST_SCHED_INFO: ::libc::c_uint = 3;
pub const HOST_RESOURCE_SIZES: ::libc::c_uint = 4;
pub const HOST_PRIORITY_INFO: ::libc::c_uint = 5;
pub const HOST_SEMAPHORE_TRAPS: ::libc::c_uint = 7;
pub const HOST_MACH_MSG_TRAP: ::libc::c_uint = 8;
pub const HOST_VM_PURGABLE: ::libc::c_uint = 9;
pub const HOST_DEBUG_INFO_INTERNAL: ::libc::c_uint = 10;
pub const HOST_LOAD_INFO: ::libc::c_uint = 1;
pub const HOST_VM_INFO: ::libc::c_uint = 2;
pub const HOST_CPU_LOAD_INFO: ::libc::c_uint = 3;
pub const HOST_VM_INFO64: ::libc::c_uint = 4;
pub const HOST_EXTMOD_INFO64: ::libc::c_uint = 5;
pub const HOST_EXPIRED_TASK_INFO: ::libc::c_uint = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: ::libc::c_uint = 0;
pub const HOST_NOTIFY_TYPE_MAX: ::libc::c_uint = 0;
pub const HOST_CALENDAR_CHANGED_REPLYID: ::libc::c_uint = 950;
pub const HOST_SECURITY_PORT: ::libc::c_uint = 0;
pub const HOST_PORT: ::libc::c_uint = 1;
pub const HOST_PRIV_PORT: ::libc::c_uint = 2;
pub const HOST_IO_MASTER_PORT: ::libc::c_uint = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: ::libc::c_uint = 7;
pub const HOST_DYNAMIC_PAGER_PORT: ::libc::c_uint = 8;
pub const HOST_AUDIT_CONTROL_PORT: ::libc::c_uint = 9;
pub const HOST_USER_NOTIFICATION_PORT: ::libc::c_uint = 10;
pub const HOST_AUTOMOUNTD_PORT: ::libc::c_uint = 11;
pub const HOST_LOCKD_PORT: ::libc::c_uint = 12;
pub const HOST_SEATBELT_PORT: ::libc::c_uint = 14;
pub const HOST_KEXTD_PORT: ::libc::c_uint = 15;
pub const HOST_CHUD_PORT: ::libc::c_uint = 16;
pub const HOST_UNFREED_PORT: ::libc::c_uint = 17;
pub const HOST_AMFID_PORT: ::libc::c_uint = 18;
pub const HOST_GSSD_PORT: ::libc::c_uint = 19;
pub const HOST_TELEMETRY_PORT: ::libc::c_uint = 20;
pub const HOST_ATM_NOTIFICATION_PORT: ::libc::c_uint = 21;
pub const HOST_COALITION_PORT: ::libc::c_uint = 22;
pub const HOST_SYSDIAGNOSE_PORT: ::libc::c_uint = 23;
pub const HOST_XPC_EXCEPTION_PORT: ::libc::c_uint = 24;
pub const HOST_CONTAINERD_PORT: ::libc::c_uint = 25;
pub const HOST_MAX_SPECIAL_PORT: ::libc::c_uint = 25;
pub const HOST_LOCAL_NODE: ::libc::c_int = -1;
pub const VM_PROT_MEMORY_TAG_MASK: ::libc::c_uint = 4278190080;
pub const VM_PROT_MEMORY_TAG_SHIFT: ::libc::c_uint = 24;
pub const MEMORY_OBJECT_COPY_NONE: ::libc::c_uint = 0;
pub const MEMORY_OBJECT_COPY_CALL: ::libc::c_uint = 1;
pub const MEMORY_OBJECT_COPY_DELAY: ::libc::c_uint = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: ::libc::c_uint = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: ::libc::c_uint = 4;
pub const MEMORY_OBJECT_COPY_INVALID: ::libc::c_uint = 5;
pub const MEMORY_OBJECT_RETURN_NONE: ::libc::c_uint = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: ::libc::c_uint = 1;
pub const MEMORY_OBJECT_RETURN_ALL: ::libc::c_uint = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: ::libc::c_uint = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: ::libc::c_uint = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: ::libc::c_uint = 2;
pub const MEMORY_OBJECT_DATA_PURGE: ::libc::c_uint = 4;
pub const MEMORY_OBJECT_COPY_SYNC: ::libc::c_uint = 8;
pub const MEMORY_OBJECT_DATA_SYNC: ::libc::c_uint = 16;
pub const MEMORY_OBJECT_IO_SYNC: ::libc::c_uint = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: ::libc::c_uint = 64;
pub const MEMORY_OBJECT_INFO_MAX: ::libc::c_uint = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: ::libc::c_uint = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: ::libc::c_uint = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: ::libc::c_uint = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: ::libc::c_uint = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: ::libc::c_uint = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: ::libc::c_uint = 4;
pub const MAP_MEM_NOOP: ::libc::c_uint = 0;
pub const MAP_MEM_COPYBACK: ::libc::c_uint = 1;
pub const MAP_MEM_IO: ::libc::c_uint = 2;
pub const MAP_MEM_WTHRU: ::libc::c_uint = 3;
pub const MAP_MEM_WCOMB: ::libc::c_uint = 4;
pub const MAP_MEM_INNERWBACK: ::libc::c_uint = 5;
pub const MAP_MEM_ONLY: ::libc::c_uint = 65536;
pub const MAP_MEM_NAMED_CREATE: ::libc::c_uint = 131072;
pub const MAP_MEM_PURGABLE: ::libc::c_uint = 262144;
pub const MAP_MEM_NAMED_REUSE: ::libc::c_uint = 524288;
pub const MAP_MEM_USE_DATA_ADDR: ::libc::c_uint = 1048576;
pub const MAP_MEM_VM_COPY: ::libc::c_uint = 2097152;
pub const MAP_MEM_VM_SHARE: ::libc::c_uint = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: ::libc::c_uint = 8388608;
pub const EXC_TYPES_COUNT: ::libc::c_uint = 14;
pub const EXCEPTION_CODE_MAX: ::libc::c_uint = 2;
pub const EXC_I386_INVOP: ::libc::c_uint = 1;
pub const EXC_I386_DIV: ::libc::c_uint = 1;
pub const EXC_I386_INTO: ::libc::c_uint = 2;
pub const EXC_I386_NOEXT: ::libc::c_uint = 3;
pub const EXC_I386_EXTOVR: ::libc::c_uint = 4;
pub const EXC_I386_EXTERR: ::libc::c_uint = 5;
pub const EXC_I386_EMERR: ::libc::c_uint = 6;
pub const EXC_I386_BOUND: ::libc::c_uint = 7;
pub const EXC_I386_SSEEXTERR: ::libc::c_uint = 8;
pub const EXC_I386_SGL: ::libc::c_uint = 1;
pub const EXC_I386_BPT: ::libc::c_uint = 2;
pub const EXC_I386_DIVERR: ::libc::c_uint = 0;
pub const EXC_I386_SGLSTP: ::libc::c_uint = 1;
pub const EXC_I386_NMIFLT: ::libc::c_uint = 2;
pub const EXC_I386_BPTFLT: ::libc::c_uint = 3;
pub const EXC_I386_INTOFLT: ::libc::c_uint = 4;
pub const EXC_I386_BOUNDFLT: ::libc::c_uint = 5;
pub const EXC_I386_INVOPFLT: ::libc::c_uint = 6;
pub const EXC_I386_NOEXTFLT: ::libc::c_uint = 7;
pub const EXC_I386_DBLFLT: ::libc::c_uint = 8;
pub const EXC_I386_EXTOVRFLT: ::libc::c_uint = 9;
pub const EXC_I386_INVTSSFLT: ::libc::c_uint = 10;
pub const EXC_I386_SEGNPFLT: ::libc::c_uint = 11;
pub const EXC_I386_STKFLT: ::libc::c_uint = 12;
pub const EXC_I386_GPFLT: ::libc::c_uint = 13;
pub const EXC_I386_PGFLT: ::libc::c_uint = 14;
pub const EXC_I386_EXTERRFLT: ::libc::c_uint = 16;
pub const EXC_I386_ALIGNFLT: ::libc::c_uint = 17;
pub const EXC_I386_ENDPERR: ::libc::c_uint = 33;
pub const EXC_I386_ENOEXTFLT: ::libc::c_uint = 32;
pub const EXC_MASK_MACHINE: ::libc::c_uint = 0;
pub const EXC_BAD_ACCESS: ::libc::c_uint = 1;
pub const EXC_BAD_INSTRUCTION: ::libc::c_uint = 2;
pub const EXC_ARITHMETIC: ::libc::c_uint = 3;
pub const EXC_EMULATION: ::libc::c_uint = 4;
pub const EXC_SOFTWARE: ::libc::c_uint = 5;
pub const EXC_BREAKPOINT: ::libc::c_uint = 6;
pub const EXC_SYSCALL: ::libc::c_uint = 7;
pub const EXC_MACH_SYSCALL: ::libc::c_uint = 8;
pub const EXC_RPC_ALERT: ::libc::c_uint = 9;
pub const EXC_CRASH: ::libc::c_uint = 10;
pub const EXC_RESOURCE: ::libc::c_uint = 11;
pub const EXC_GUARD: ::libc::c_uint = 12;
pub const EXC_CORPSE_NOTIFY: ::libc::c_uint = 13;
pub const EXCEPTION_DEFAULT: ::libc::c_uint = 1;
pub const EXCEPTION_STATE: ::libc::c_uint = 2;
pub const EXCEPTION_STATE_IDENTITY: ::libc::c_uint = 3;
pub const MACH_EXCEPTION_CODES: ::libc::c_uint = 2147483648;
pub const EXC_MASK_BAD_ACCESS: ::libc::c_uint = 2;
pub const EXC_MASK_BAD_INSTRUCTION: ::libc::c_uint = 4;
pub const EXC_MASK_ARITHMETIC: ::libc::c_uint = 8;
pub const EXC_MASK_EMULATION: ::libc::c_uint = 16;
pub const EXC_MASK_SOFTWARE: ::libc::c_uint = 32;
pub const EXC_MASK_BREAKPOINT: ::libc::c_uint = 64;
pub const EXC_MASK_SYSCALL: ::libc::c_uint = 128;
pub const EXC_MASK_MACH_SYSCALL: ::libc::c_uint = 256;
pub const EXC_MASK_RPC_ALERT: ::libc::c_uint = 512;
pub const EXC_MASK_CRASH: ::libc::c_uint = 1024;
pub const EXC_MASK_RESOURCE: ::libc::c_uint = 2048;
pub const EXC_MASK_GUARD: ::libc::c_uint = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: ::libc::c_uint = 8192;
pub const EXC_MASK_ALL: ::libc::c_uint = 7166;
pub const FIRST_EXCEPTION: ::libc::c_uint = 1;
pub const EXC_SOFT_SIGNAL: ::libc::c_uint = 65539;
pub const EXC_MACF_MIN: ::libc::c_uint = 131072;
pub const EXC_MACF_MAX: ::libc::c_uint = 196607;
pub const FP_PREC_24B: ::libc::c_uint = 0;
pub const FP_PREC_53B: ::libc::c_uint = 2;
pub const FP_PREC_64B: ::libc::c_uint = 3;
pub const FP_RND_NEAR: ::libc::c_uint = 0;
pub const FP_RND_DOWN: ::libc::c_uint = 1;
pub const FP_RND_UP: ::libc::c_uint = 2;
pub const FP_CHOP: ::libc::c_uint = 3;
pub const FP_STATE_BYTES: ::libc::c_uint = 512;
pub const FPC_IE: ::libc::c_uint = 1;
pub const FPC_IM: ::libc::c_uint = 1;
pub const FPC_DE: ::libc::c_uint = 2;
pub const FPC_DM: ::libc::c_uint = 2;
pub const FPC_ZE: ::libc::c_uint = 4;
pub const FPC_ZM: ::libc::c_uint = 4;
pub const FPC_OE: ::libc::c_uint = 8;
pub const FPC_OM: ::libc::c_uint = 8;
pub const FPC_UE: ::libc::c_uint = 16;
pub const FPC_PE: ::libc::c_uint = 32;
pub const FPC_PC: ::libc::c_uint = 768;
pub const FPC_PC_24: ::libc::c_uint = 0;
pub const FPC_PC_53: ::libc::c_uint = 512;
pub const FPC_PC_64: ::libc::c_uint = 768;
pub const FPC_RC: ::libc::c_uint = 3072;
pub const FPC_RC_RN: ::libc::c_uint = 0;
pub const FPC_RC_RD: ::libc::c_uint = 1024;
pub const FPC_RC_RU: ::libc::c_uint = 2048;
pub const FPC_RC_CHOP: ::libc::c_uint = 3072;
pub const FPC_IC: ::libc::c_uint = 4096;
pub const FPC_IC_PROJ: ::libc::c_uint = 0;
pub const FPC_IC_AFF: ::libc::c_uint = 4096;
pub const FPS_IE: ::libc::c_uint = 1;
pub const FPS_DE: ::libc::c_uint = 2;
pub const FPS_ZE: ::libc::c_uint = 4;
pub const FPS_OE: ::libc::c_uint = 8;
pub const FPS_UE: ::libc::c_uint = 16;
pub const FPS_PE: ::libc::c_uint = 32;
pub const FPS_SF: ::libc::c_uint = 64;
pub const FPS_ES: ::libc::c_uint = 128;
pub const FPS_C0: ::libc::c_uint = 256;
pub const FPS_C1: ::libc::c_uint = 512;
pub const FPS_C2: ::libc::c_uint = 1024;
pub const FPS_TOS: ::libc::c_uint = 14336;
pub const FPS_TOS_SHIFT: ::libc::c_uint = 11;
pub const FPS_C3: ::libc::c_uint = 16384;
pub const FPS_BUSY: ::libc::c_uint = 32768;
pub const FP_NO: ::libc::c_uint = 0;
pub const FP_SOFT: ::libc::c_uint = 1;
pub const FP_287: ::libc::c_uint = 2;
pub const FP_387: ::libc::c_uint = 3;
pub const FP_FXSR: ::libc::c_uint = 4;
pub const I386_THREAD_STATE_MAX: ::libc::c_uint = 224;
pub const THREAD_STATE_MAX: ::libc::c_uint = 224;
pub const EFL_CF: ::libc::c_uint = 1;
pub const EFL_PF: ::libc::c_uint = 4;
pub const EFL_AF: ::libc::c_uint = 16;
pub const EFL_ZF: ::libc::c_uint = 64;
pub const EFL_SF: ::libc::c_uint = 128;
pub const EFL_TF: ::libc::c_uint = 256;
pub const EFL_IF: ::libc::c_uint = 512;
pub const EFL_DF: ::libc::c_uint = 1024;
pub const EFL_OF: ::libc::c_uint = 2048;
pub const EFL_IOPL: ::libc::c_uint = 12288;
pub const EFL_IOPL_KERNEL: ::libc::c_uint = 0;
pub const EFL_IOPL_USER: ::libc::c_uint = 12288;
pub const EFL_NT: ::libc::c_uint = 16384;
pub const EFL_RF: ::libc::c_uint = 65536;
pub const EFL_VM: ::libc::c_uint = 131072;
pub const EFL_AC: ::libc::c_uint = 262144;
pub const EFL_VIF: ::libc::c_uint = 524288;
pub const EFL_VIP: ::libc::c_uint = 1048576;
pub const EFL_ID: ::libc::c_uint = 2097152;
pub const EFL_CLR: ::libc::c_uint = 4294475816;
pub const EFL_SET: ::libc::c_uint = 2;
pub const EFL_USER_SET: ::libc::c_uint = 512;
pub const EFL_USER_CLEAR: ::libc::c_uint = 94208;
pub const i386_THREAD_STATE: ::libc::c_uint = 1;
pub const i386_FLOAT_STATE: ::libc::c_uint = 2;
pub const i386_EXCEPTION_STATE: ::libc::c_uint = 3;
pub const x86_THREAD_STATE32: ::libc::c_uint = 1;
pub const x86_FLOAT_STATE32: ::libc::c_uint = 2;
pub const x86_EXCEPTION_STATE32: ::libc::c_uint = 3;
pub const x86_THREAD_STATE64: ::libc::c_uint = 4;
pub const x86_FLOAT_STATE64: ::libc::c_uint = 5;
pub const x86_EXCEPTION_STATE64: ::libc::c_uint = 6;
pub const x86_THREAD_STATE: ::libc::c_uint = 7;
pub const x86_FLOAT_STATE: ::libc::c_uint = 8;
pub const x86_EXCEPTION_STATE: ::libc::c_uint = 9;
pub const x86_DEBUG_STATE32: ::libc::c_uint = 10;
pub const x86_DEBUG_STATE64: ::libc::c_uint = 11;
pub const x86_DEBUG_STATE: ::libc::c_uint = 12;
pub const THREAD_STATE_NONE: ::libc::c_uint = 13;
pub const x86_AVX_STATE32: ::libc::c_uint = 16;
pub const x86_AVX_STATE64: ::libc::c_uint = 17;
pub const x86_AVX_STATE: ::libc::c_uint = 18;
pub const THREAD_MACHINE_STATE_MAX: ::libc::c_uint = 224;
pub const USER_CODE_SELECTOR: ::libc::c_uint = 23;
pub const USER_DATA_SELECTOR: ::libc::c_uint = 31;
pub const KERN_CODE_SELECTOR: ::libc::c_uint = 8;
pub const KERN_DATA_SELECTOR: ::libc::c_uint = 16;
pub const MACHINE_THREAD_STATE: ::libc::c_uint = 7;
pub const THREAD_STATE_FLAVOR_LIST: ::libc::c_uint = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: ::libc::c_uint = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: ::libc::c_uint = 129;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: ::libc::c_uint = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: ::libc::c_uint = 2;
pub const PROCESSOR_INFO_MAX: ::libc::c_uint = 1024;
pub const PROCESSOR_SET_INFO_MAX: ::libc::c_uint = 1024;
pub const PROCESSOR_BASIC_INFO: ::libc::c_uint = 1;
pub const PROCESSOR_CPU_LOAD_INFO: ::libc::c_uint = 2;
pub const PROCESSOR_PM_REGS_INFO: ::libc::c_uint = 268435457;
pub const PROCESSOR_TEMPERATURE: ::libc::c_uint = 268435458;
pub const LOAD_SCALE: ::libc::c_uint = 1000;
pub const PROCESSOR_SET_BASIC_INFO: ::libc::c_uint = 5;
pub const PROCESSOR_SET_LOAD_INFO: ::libc::c_uint = 4;
pub const POLICY_NULL: ::libc::c_uint = 0;
pub const POLICY_TIMESHARE: ::libc::c_uint = 1;
pub const POLICY_RR: ::libc::c_uint = 2;
pub const POLICY_FIFO: ::libc::c_uint = 4;
pub const POLICYCLASS_FIXEDPRI: ::libc::c_uint = 6;
pub const TASK_INFO_MAX: ::libc::c_uint = 1024;
pub const TASK_BASIC_INFO_32: ::libc::c_uint = 4;
pub const TASK_BASIC2_INFO_32: ::libc::c_uint = 6;
pub const TASK_BASIC_INFO_64: ::libc::c_uint = 5;
pub const TASK_BASIC_INFO: ::libc::c_uint = 5;
pub const TASK_EVENTS_INFO: ::libc::c_uint = 2;
pub const TASK_THREAD_TIMES_INFO: ::libc::c_uint = 3;
pub const TASK_ABSOLUTETIME_INFO: ::libc::c_uint = 1;
pub const TASK_KERNELMEMORY_INFO: ::libc::c_uint = 7;
pub const TASK_SECURITY_TOKEN: ::libc::c_uint = 13;
pub const TASK_AUDIT_TOKEN: ::libc::c_uint = 15;
pub const TASK_AFFINITY_TAG_INFO: ::libc::c_uint = 16;
pub const TASK_DYLD_INFO: ::libc::c_uint = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: ::libc::c_uint = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: ::libc::c_uint = 1;
pub const TASK_EXTMOD_INFO: ::libc::c_uint = 19;
pub const MACH_TASK_BASIC_INFO: ::libc::c_uint = 20;
pub const TASK_POWER_INFO: ::libc::c_uint = 21;
pub const TASK_VM_INFO: ::libc::c_uint = 22;
pub const TASK_VM_INFO_PURGEABLE: ::libc::c_uint = 23;
pub const TASK_TRACE_MEMORY_INFO: ::libc::c_uint = 24;
pub const TASK_WAIT_STATE_INFO: ::libc::c_uint = 25;
pub const TASK_POWER_INFO_V2: ::libc::c_uint = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: ::libc::c_uint = 27;
pub const TASK_FLAGS_INFO: ::libc::c_uint = 28;
pub const TF_LP64: ::libc::c_uint = 1;
pub const TASK_DEBUG_INFO_INTERNAL: ::libc::c_uint = 29;
pub const TASK_SCHED_TIMESHARE_INFO: ::libc::c_uint = 10;
pub const TASK_SCHED_RR_INFO: ::libc::c_uint = 11;
pub const TASK_SCHED_FIFO_INFO: ::libc::c_uint = 12;
pub const TASK_SCHED_INFO: ::libc::c_uint = 14;
pub const TASK_CATEGORY_POLICY: ::libc::c_uint = 1;
pub const TASK_SUPPRESSION_POLICY: ::libc::c_uint = 3;
pub const TASK_POLICY_STATE: ::libc::c_uint = 4;
pub const TASK_BASE_QOS_POLICY: ::libc::c_uint = 8;
pub const TASK_OVERRIDE_QOS_POLICY: ::libc::c_uint = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: ::libc::c_uint = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: ::libc::c_uint = 11;
pub const PROC_FLAG_DARWINBG: ::libc::c_uint = 32768;
pub const PROC_FLAG_EXT_DARWINBG: ::libc::c_uint = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: ::libc::c_uint = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: ::libc::c_uint = 524288;
pub const PROC_FLAG_ADAPTIVE: ::libc::c_uint = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: ::libc::c_uint = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: ::libc::c_uint = 4194304;
pub const PROC_FLAG_SUPPRESSED: ::libc::c_uint = 8388608;
pub const PROC_FLAG_APPLICATION: ::libc::c_uint = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: ::libc::c_uint = 16777216;
pub const TASK_KERNEL_PORT: ::libc::c_uint = 1;
pub const TASK_HOST_PORT: ::libc::c_uint = 2;
pub const TASK_NAME_PORT: ::libc::c_uint = 3;
pub const TASK_BOOTSTRAP_PORT: ::libc::c_uint = 4;
pub const TASK_SEATBELT_PORT: ::libc::c_uint = 7;
pub const TASK_ACCESS_PORT: ::libc::c_uint = 9;
pub const TASK_DEBUG_CONTROL_PORT: ::libc::c_uint = 10;
pub const THREAD_INFO_MAX: ::libc::c_uint = 32;
pub const THREAD_BASIC_INFO: ::libc::c_uint = 3;
pub const THREAD_IDENTIFIER_INFO: ::libc::c_uint = 4;
pub const TH_USAGE_SCALE: ::libc::c_uint = 1000;
pub const TH_STATE_RUNNING: ::libc::c_uint = 1;
pub const TH_STATE_STOPPED: ::libc::c_uint = 2;
pub const TH_STATE_WAITING: ::libc::c_uint = 3;
pub const TH_STATE_UNINTERRUPTIBLE: ::libc::c_uint = 4;
pub const TH_STATE_HALTED: ::libc::c_uint = 5;
pub const TH_FLAGS_SWAPPED: ::libc::c_uint = 1;
pub const TH_FLAGS_IDLE: ::libc::c_uint = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: ::libc::c_uint = 4;
pub const THREAD_EXTENDED_INFO: ::libc::c_uint = 5;
pub const MAXTHREADNAMESIZE: ::libc::c_uint = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: ::libc::c_uint = 6;
pub const IO_NUM_PRIORITIES: ::libc::c_uint = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: ::libc::c_uint = 10;
pub const THREAD_SCHED_RR_INFO: ::libc::c_uint = 11;
pub const THREAD_SCHED_FIFO_INFO: ::libc::c_uint = 12;
pub const THREAD_STANDARD_POLICY: ::libc::c_uint = 1;
pub const THREAD_STANDARD_POLICY_COUNT: ::libc::c_uint = 0;
pub const THREAD_EXTENDED_POLICY: ::libc::c_uint = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: ::libc::c_uint = 2;
pub const THREAD_PRECEDENCE_POLICY: ::libc::c_uint = 3;
pub const THREAD_AFFINITY_POLICY: ::libc::c_uint = 4;
pub const THREAD_AFFINITY_TAG_NULL: ::libc::c_uint = 0;
pub const THREAD_BACKGROUND_POLICY: ::libc::c_uint = 5;
pub const THREAD_LATENCY_QOS_POLICY: ::libc::c_uint = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: ::libc::c_uint = 8;
pub const THREAD_KERNEL_PORT: ::libc::c_uint = 1;
pub const SYSTEM_CLOCK: ::libc::c_uint = 0;
pub const CALENDAR_CLOCK: ::libc::c_uint = 1;
pub const REALTIME_CLOCK: ::libc::c_uint = 0;
pub const CLOCK_GET_TIME_RES: ::libc::c_uint = 1;
pub const CLOCK_ALARM_CURRES: ::libc::c_uint = 3;
pub const CLOCK_ALARM_MINRES: ::libc::c_uint = 4;
pub const CLOCK_ALARM_MAXRES: ::libc::c_uint = 5;
pub const NSEC_PER_USEC: ::libc::c_uint = 1000;
pub const USEC_PER_SEC: ::libc::c_uint = 1000000;
pub const NSEC_PER_SEC: ::libc::c_uint = 1000000000;
pub const NSEC_PER_MSEC: ::libc::c_uint = 1000000;
pub const ALRMTYPE: ::libc::c_uint = 255;
pub const TIME_ABSOLUTE: ::libc::c_uint = 0;
pub const TIME_RELATIVE: ::libc::c_uint = 1;
pub const MATTR_CACHE: ::libc::c_uint = 1;
pub const MATTR_MIGRATE: ::libc::c_uint = 2;
pub const MATTR_REPLICATE: ::libc::c_uint = 4;
pub const MATTR_VAL_OFF: ::libc::c_uint = 0;
pub const MATTR_VAL_ON: ::libc::c_uint = 1;
pub const MATTR_VAL_GET: ::libc::c_uint = 2;
pub const MATTR_VAL_CACHE_FLUSH: ::libc::c_uint = 6;
pub const MATTR_VAL_DCACHE_FLUSH: ::libc::c_uint = 7;
pub const MATTR_VAL_ICACHE_FLUSH: ::libc::c_uint = 8;
pub const MATTR_VAL_CACHE_SYNC: ::libc::c_uint = 9;
pub const MATTR_VAL_GET_INFO: ::libc::c_uint = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: ::libc::c_uint = 16;
pub const VM_PURGABLE_NO_AGING_MASK: ::libc::c_uint = 65536;
pub const VM_PURGABLE_NO_AGING: ::libc::c_uint = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: ::libc::c_uint = 12;
pub const VM_PURGABLE_DEBUG_MASK: ::libc::c_uint = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: ::libc::c_uint = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: ::libc::c_uint = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: ::libc::c_uint = 8;
pub const VM_VOLATILE_GROUP_MASK: ::libc::c_uint = 1792;
pub const VM_VOLATILE_GROUP_0: ::libc::c_uint = 0;
pub const VM_VOLATILE_GROUP_1: ::libc::c_uint = 256;
pub const VM_VOLATILE_GROUP_2: ::libc::c_uint = 512;
pub const VM_VOLATILE_GROUP_3: ::libc::c_uint = 768;
pub const VM_VOLATILE_GROUP_4: ::libc::c_uint = 1024;
pub const VM_VOLATILE_GROUP_5: ::libc::c_uint = 1280;
pub const VM_VOLATILE_GROUP_6: ::libc::c_uint = 1536;
pub const VM_VOLATILE_GROUP_7: ::libc::c_uint = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: ::libc::c_uint = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: ::libc::c_uint = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: ::libc::c_uint = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: ::libc::c_uint = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: ::libc::c_uint = 5;
pub const VM_PURGABLE_ORDERING_MASK: ::libc::c_uint = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: ::libc::c_uint = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: ::libc::c_uint = 0;
pub const VM_VOLATILE_ORDER_SHIFT: ::libc::c_uint = 4;
pub const VM_VOLATILE_ORDER_MASK: ::libc::c_uint = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: ::libc::c_uint = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: ::libc::c_uint = 0;
pub const VM_PURGABLE_STATE_MIN: ::libc::c_uint = 0;
pub const VM_PURGABLE_STATE_MAX: ::libc::c_uint = 3;
pub const VM_PURGABLE_STATE_MASK: ::libc::c_uint = 3;
pub const VM_PURGABLE_NONVOLATILE: ::libc::c_uint = 0;
pub const VM_PURGABLE_VOLATILE: ::libc::c_uint = 1;
pub const VM_PURGABLE_EMPTY: ::libc::c_uint = 2;
pub const VM_PURGABLE_DENY: ::libc::c_uint = 3;
pub const VM_PURGABLE_ALL_MASKS: ::libc::c_uint = 79731;
pub const VM_REGION_INFO_MAX: ::libc::c_uint = 1024;
pub const VM_REGION_BASIC_INFO_64: ::libc::c_uint = 9;
pub const VM_REGION_BASIC_INFO: ::libc::c_uint = 10;
pub const SM_COW: ::libc::c_uint = 1;
pub const SM_PRIVATE: ::libc::c_uint = 2;
pub const SM_EMPTY: ::libc::c_uint = 3;
pub const SM_SHARED: ::libc::c_uint = 4;
pub const SM_TRUESHARED: ::libc::c_uint = 5;
pub const SM_PRIVATE_ALIASED: ::libc::c_uint = 6;
pub const SM_SHARED_ALIASED: ::libc::c_uint = 7;
pub const SM_LARGE_PAGE: ::libc::c_uint = 8;
pub const VM_REGION_EXTENDED_INFO: ::libc::c_uint = 13;
pub const VM_REGION_TOP_INFO: ::libc::c_uint = 12;
pub const VM_MAP_ENTRY_MAX: ::libc::c_uint = 256;
pub const VM_PAGE_INFO_BASIC: ::libc::c_uint = 1;
pub const KMOD_MAX_NAME: ::libc::c_uint = 64;
pub const KMOD_RETURN_SUCCESS: ::libc::c_uint = 0;
pub const KMOD_RETURN_FAILURE: ::libc::c_uint = 5;
pub const KMOD_INFO_VERSION: ::libc::c_uint = 1;
pub const __DARWIN_WCHAR_MIN: ::libc::c_int = -2147483648;
pub const _FORTIFY_SOURCE: ::libc::c_uint = 2;
pub const _USE_FORTIFY_LEVEL: ::libc::c_uint = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: ::libc::c_uint = 1;
pub const NDR_PROTOCOL_2_0: ::libc::c_uint = 0;
pub const NDR_INT_BIG_ENDIAN: ::libc::c_uint = 0;
pub const NDR_INT_LITTLE_ENDIAN: ::libc::c_uint = 1;
pub const NDR_FLOAT_IEEE: ::libc::c_uint = 0;
pub const NDR_FLOAT_VAX: ::libc::c_uint = 1;
pub const NDR_FLOAT_CRAY: ::libc::c_uint = 2;
pub const NDR_FLOAT_IBM: ::libc::c_uint = 3;
pub const NDR_CHAR_ASCII: ::libc::c_uint = 0;
pub const NDR_CHAR_EBCDIC: ::libc::c_uint = 1;
pub const __NDR_convert__: ::libc::c_uint = 0;
pub const __NDR_convert__int_rep__: ::libc::c_uint = 0;
pub const __NDR_convert__char_rep__: ::libc::c_uint = 0;
pub const __NDR_convert__float_rep__: ::libc::c_uint = 0;
pub const MACH_NOTIFY_FIRST: ::libc::c_uint = 64;
pub const MACH_NOTIFY_PORT_DELETED: ::libc::c_uint = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: ::libc::c_uint = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: ::libc::c_uint = 69;
pub const MACH_NOTIFY_NO_SENDERS: ::libc::c_uint = 70;
pub const MACH_NOTIFY_SEND_ONCE: ::libc::c_uint = 71;
pub const MACH_NOTIFY_DEAD_NAME: ::libc::c_uint = 72;
pub const MACH_NOTIFY_LAST: ::libc::c_uint = 77;
pub const __MigTypeCheck: ::libc::c_uint = 1;
pub const __MigPackStructs: ::libc::c_uint = 1;
pub const MIG_TYPE_ERROR: ::libc::c_int = -300;
pub const MIG_REPLY_MISMATCH: ::libc::c_int = -301;
pub const MIG_REMOTE_ERROR: ::libc::c_int = -302;
pub const MIG_BAD_ID: ::libc::c_int = -303;
pub const MIG_BAD_ARGUMENTS: ::libc::c_int = -304;
pub const MIG_NO_REPLY: ::libc::c_int = -305;
pub const MIG_EXCEPTION: ::libc::c_int = -306;
pub const MIG_ARRAY_TOO_LARGE: ::libc::c_int = -307;
pub const MIG_SERVER_DIED: ::libc::c_int = -308;
pub const MIG_TRAILER_ERROR: ::libc::c_int = -309;
pub const clock_priv_MSG_COUNT: ::libc::c_uint = 2;
pub const host_priv_MSG_COUNT: ::libc::c_uint = 26;
pub const ZONE_NAME_MAX_LEN: ::libc::c_uint = 80;
pub const MACH_ZONE_NAME_MAX_LEN: ::libc::c_uint = 80;
pub const LOCKGROUP_MAX_NAME: ::libc::c_uint = 64;
pub const LOCKGROUP_ATTR_STAT: ::libc::c_uint = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: ::libc::c_ulonglong =
    27973006578180435;
pub const host_security_MSG_COUNT: ::libc::c_uint = 2;
pub const lock_set_MSG_COUNT: ::libc::c_uint = 6;
pub const processor_MSG_COUNT: ::libc::c_uint = 6;
pub const processor_set_MSG_COUNT: ::libc::c_uint = 10;
pub const SYNC_POLICY_FIFO: ::libc::c_uint = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: ::libc::c_uint = 1;
pub const SYNC_POLICY_REVERSED: ::libc::c_uint = 2;
pub const SYNC_POLICY_ORDER_MASK: ::libc::c_uint = 3;
pub const SYNC_POLICY_LIFO: ::libc::c_uint = 2;
pub const SYNC_POLICY_MAX: ::libc::c_uint = 7;
pub const task_MSG_COUNT: ::libc::c_uint = 42;
pub const thread_act_MSG_COUNT: ::libc::c_uint = 28;
pub const vm_map_MSG_COUNT: ::libc::c_uint = 31;
pub const mach_port_MSG_COUNT: ::libc::c_uint = 36;
pub const _MACH_INIT_: ::libc::c_uint = 1;
pub const __GNUC_VA_LIST: ::libc::c_uint = 1;
pub const _QUAD_HIGHWORD: ::libc::c_uint = 1;
pub const _QUAD_LOWWORD: ::libc::c_uint = 0;
pub const __DARWIN_LITTLE_ENDIAN: ::libc::c_uint = 1234;
pub const __DARWIN_BIG_ENDIAN: ::libc::c_uint = 4321;
pub const __DARWIN_PDP_ENDIAN: ::libc::c_uint = 3412;
pub const __DARWIN_BYTE_ORDER: ::libc::c_uint = 1234;
pub const LITTLE_ENDIAN: ::libc::c_uint = 1234;
pub const BIG_ENDIAN: ::libc::c_uint = 4321;
pub const PDP_ENDIAN: ::libc::c_uint = 3412;
pub const BYTE_ORDER: ::libc::c_uint = 1234;
pub const NAME_SERVER_SLOT: ::libc::c_uint = 0;
pub const ENVIRONMENT_SLOT: ::libc::c_uint = 1;
pub const SERVICE_SLOT: ::libc::c_uint = 2;
pub const MACH_PORTS_SLOTS_USED: ::libc::c_uint = 3;
pub const mach_host_MSG_COUNT: ::libc::c_uint = 31;
pub const SWITCH_OPTION_NONE: ::libc::c_uint = 0;
pub const SWITCH_OPTION_DEPRESS: ::libc::c_uint = 1;
pub const SWITCH_OPTION_WAIT: ::libc::c_uint = 2;
pub const RPC_SIGBUF_SIZE: ::libc::c_uint = 8;
pub const _MACH_ERROR_: ::libc::c_uint = 1;
pub const code_emask: ::libc::c_uint = 16383;
pub const err_max_system: ::libc::c_uint = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: ::libc::c_uint = 20140205;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::libc::c_schar;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub union __mbstate_t {
    pub __mbstate8: [::libc::c_char; 128usize],
    pub _mbstateL: ::libc::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::libc::c_void)>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl Clone for _opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40usize],
}
impl Clone for _opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl Clone for _opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192usize],
}
impl Clone for _opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16usize],
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 8176usize],
}
impl Clone for _opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type boolean_t = ::libc::c_uint;
pub type kern_return_t = ::libc::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::libc::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
impl Clone for mach_port_status {
    fn clone(&self) -> Self { *self }
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Copy)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
impl Clone for mach_port_limits {
    fn clone(&self) -> Self { *self }
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Copy)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
impl Clone for mach_port_info_ext {
    fn clone(&self) -> Self { *self }
}
pub type mach_port_info_ext_t = mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct mach_port_qos {
    pub _bitfield_1: u32,
    pub len: natural_t,
}
impl Clone for mach_port_qos {
    fn clone(&self) -> Self { *self }
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::libc::c_uint {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 1u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::libc::c_uint) {
        let mask = 1u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::libc::c_uint {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 2u64 as u32;
        let val = (unit_field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::libc::c_uint) {
        let mask = 2u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 1usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4294967292u64 as u32;
        let val = (unit_field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        let mask = 4294967292u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 2usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(name: ::libc::c_uint, prealloc: ::libc::c_uint,
                          pad1: boolean_t) -> u32 {
        ({
             ({ ({ 0 } | ((name as u32 as u32) << 0usize) & (1u64 as u32)) } |
                  ((prealloc as u32 as u32) << 1usize) & (2u64 as u32))
         } | ((pad1 as u32 as u32) << 2usize) & (4294967292u64 as u32))
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Copy)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub reserved: [u64; 2usize],
}
impl Clone for mach_port_options {
    fn clone(&self) -> Self { *self }
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum mach_port_guard_exception_codes {
    kGUARD_EXC_DESTROY = 1,
    kGUARD_EXC_MOD_REFS = 2,
    kGUARD_EXC_SET_CONTEXT = 4,
    kGUARD_EXC_UNGUARDED = 8,
    kGUARD_EXC_INCORRECT_GUARD = 16,
}
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::libc::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_type_name_t = ::libc::c_uint;
pub type mach_msg_copy_options_t = ::libc::c_uint;
pub type mach_msg_descriptor_type_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_1: u32,
}
impl Clone for mach_msg_type_descriptor_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::libc::c_uint {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16777215u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::libc::c_uint) {
        let mask = 16777215u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(pad3: ::libc::c_uint,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({ ({ 0 } | ((pad3 as u32 as u32) << 0usize) & (16777215u64 as u32)) }
             | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_1: [u16; 2usize],
}
impl Clone for mach_msg_port_descriptor_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::libc::c_uint {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65535u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::libc::c_uint) {
        let mask = 65535u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16711680u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        let mask = 16711680u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(pad2: ::libc::c_uint,
                          disposition: mach_msg_type_name_t,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({
             ({
                  ({ 0 } |
                       ((pad2 as u32 as u32) << 0usize) & (65535u64 as u32))
              } |
                  ((disposition as u32 as u32) << 16usize) &
                      (16711680u64 as u32))
         } | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_1: [u8; 4usize],
}
impl Clone for mach_msg_ool_descriptor32_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 255u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        let mask = 255u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65280u64 as u32;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        let mask = 65280u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::libc::c_uint {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16711680u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::libc::c_uint) {
        let mask = 16711680u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(deallocate: boolean_t,
                          copy: mach_msg_copy_options_t, pad1: ::libc::c_uint,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({
             ({
                  ({
                       ({ 0 } |
                            ((deallocate as u32 as u32) << 0usize) &
                                (255u64 as u32))
                   } | ((copy as u32 as u32) << 8usize) & (65280u64 as u32))
              } | ((pad1 as u32 as u32) << 16usize) & (16711680u64 as u32))
         } | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_1: [u8; 4usize],
    pub size: mach_msg_size_t,
}
impl Clone for mach_msg_ool_descriptor64_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 255u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        let mask = 255u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65280u64 as u32;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        let mask = 65280u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::libc::c_uint {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16711680u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::libc::c_uint) {
        let mask = 16711680u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(deallocate: boolean_t,
                          copy: mach_msg_copy_options_t, pad1: ::libc::c_uint,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({
             ({
                  ({
                       ({ 0 } |
                            ((deallocate as u32 as u32) << 0usize) &
                                (255u64 as u32))
                   } | ((copy as u32 as u32) << 8usize) & (65280u64 as u32))
              } | ((pad1 as u32 as u32) << 16usize) & (16711680u64 as u32))
         } | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::libc::c_void,
    pub _bitfield_1: [u8; 4usize],
    pub size: mach_msg_size_t,
}
impl Clone for mach_msg_ool_descriptor_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 255u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        let mask = 255u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65280u64 as u32;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        let mask = 65280u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::libc::c_uint {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16711680u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::libc::c_uint) {
        let mask = 16711680u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(deallocate: boolean_t,
                          copy: mach_msg_copy_options_t, pad1: ::libc::c_uint,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({
             ({
                  ({
                       ({ 0 } |
                            ((deallocate as u32 as u32) << 0usize) &
                                (255u64 as u32))
                   } | ((copy as u32 as u32) << 8usize) & (65280u64 as u32))
              } | ((pad1 as u32 as u32) << 16usize) & (16711680u64 as u32))
         } | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_1: [u8; 4usize],
}
impl Clone for mach_msg_ool_ports_descriptor32_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 255u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        let mask = 255u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65280u64 as u32;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        let mask = 65280u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16711680u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        let mask = 16711680u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(deallocate: boolean_t,
                          copy: mach_msg_copy_options_t,
                          disposition: mach_msg_type_name_t,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({
             ({
                  ({
                       ({ 0 } |
                            ((deallocate as u32 as u32) << 0usize) &
                                (255u64 as u32))
                   } | ((copy as u32 as u32) << 8usize) & (65280u64 as u32))
              } |
                  ((disposition as u32 as u32) << 16usize) &
                      (16711680u64 as u32))
         } | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_1: [u8; 4usize],
    pub count: mach_msg_size_t,
}
impl Clone for mach_msg_ool_ports_descriptor64_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 255u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        let mask = 255u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65280u64 as u32;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        let mask = 65280u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16711680u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        let mask = 16711680u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(deallocate: boolean_t,
                          copy: mach_msg_copy_options_t,
                          disposition: mach_msg_type_name_t,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({
             ({
                  ({
                       ({ 0 } |
                            ((deallocate as u32 as u32) << 0usize) &
                                (255u64 as u32))
                   } | ((copy as u32 as u32) << 8usize) & (65280u64 as u32))
              } |
                  ((disposition as u32 as u32) << 16usize) &
                      (16711680u64 as u32))
         } | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::libc::c_void,
    pub _bitfield_1: [u8; 4usize],
    pub count: mach_msg_size_t,
}
impl Clone for mach_msg_ool_ports_descriptor_t {
    fn clone(&self) -> Self { *self }
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 255u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        let mask = 255u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65280u64 as u32;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        let mask = 65280u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16711680u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        let mask = 16711680u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4278190080u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        let mask = 4278190080u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(deallocate: boolean_t,
                          copy: mach_msg_copy_options_t,
                          disposition: mach_msg_type_name_t,
                          type_: mach_msg_descriptor_type_t) -> u32 {
        ({
             ({
                  ({
                       ({ 0 } |
                            ((deallocate as u32 as u32) << 0usize) &
                                (255u64 as u32))
                   } | ((copy as u32 as u32) << 8usize) & (65280u64 as u32))
              } |
                  ((disposition as u32 as u32) << 16usize) &
                      (16711680u64 as u32))
         } | ((type_ as u32 as u32) << 24usize) & (4278190080u64 as u32))
    }
}
#[repr(C)]
#[derive(Copy)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    _bindgen_union_align: [u32; 4usize],
}
impl Clone for mach_msg_descriptor_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
impl Clone for mach_msg_body_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
impl Clone for mach_msg_header_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
impl Clone for mach_msg_base_t {
    fn clone(&self) -> Self { *self }
}
pub type mach_msg_trailer_type_t = ::libc::c_uint;
pub type mach_msg_trailer_size_t = ::libc::c_uint;
pub type mach_msg_trailer_info_t = *mut ::libc::c_char;
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
impl Clone for mach_msg_trailer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
impl Clone for mach_msg_seqno_trailer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct security_token_t {
    pub val: [::libc::c_uint; 2usize],
}
impl Clone for security_token_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
impl Clone for mach_msg_security_trailer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct audit_token_t {
    pub val: [::libc::c_uint; 8usize],
}
impl Clone for audit_token_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
impl Clone for mach_msg_audit_trailer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
impl Clone for mach_msg_context_trailer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
impl Clone for msg_labels_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: ::libc::c_int,
    pub msgh_labels: msg_labels_t,
}
impl Clone for mach_msg_mac_trailer_t {
    fn clone(&self) -> Self { *self }
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    #[link_name = "KERNEL_SECURITY_TOKEN"]
    pub static mut KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    #[link_name = "KERNEL_AUDIT_TOKEN"]
    pub static mut KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
impl Clone for mach_msg_empty_send_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
impl Clone for mach_msg_empty_rcv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
    _bindgen_union_align: [u32; 8usize],
}
impl Clone for mach_msg_empty_t {
    fn clone(&self) -> Self { *self }
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(msg: *mut mach_msg_header_t,
                              option: mach_msg_option_t,
                              send_size: mach_msg_size_t,
                              rcv_size: mach_msg_size_t,
                              rcv_name: mach_port_name_t,
                              timeout: mach_msg_timeout_t,
                              notify: mach_port_name_t,
                              rcv_msg: *mut mach_msg_header_t,
                              rcv_limit: mach_msg_size_t)
     -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(msg: *mut mach_msg_header_t, option: mach_msg_option_t,
                    send_size: mach_msg_size_t, rcv_size: mach_msg_size_t,
                    rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t,
                    notify: mach_port_name_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
impl Clone for vm_statistics {
    fn clone(&self) -> Self { *self }
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Copy)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
impl Clone for vm_statistics64 {
    fn clone(&self) -> Self { *self }
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
#[repr(C)]
#[derive(Copy)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
impl Clone for vm_extmod_statistics {
    fn clone(&self) -> Self { *self }
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Copy)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
impl Clone for vm_purgeable_stat {
    fn clone(&self) -> Self { *self }
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Copy)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
impl Clone for vm_purgeable_info {
    fn clone(&self) -> Self { *self }
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
impl Clone for time_value {
    fn clone(&self) -> Self { *self }
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::libc::c_char; 512usize];
pub type kernel_boot_info_t = [::libc::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
impl Clone for host_basic_info {
    fn clone(&self) -> Self { *self }
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
impl Clone for host_sched_info {
    fn clone(&self) -> Self { *self }
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Copy)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
impl Clone for kernel_resource_sizes {
    fn clone(&self) -> Self { *self }
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Copy)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
impl Clone for host_priority_info {
    fn clone(&self) -> Self { *self }
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Copy)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
impl Clone for host_load_info {
    fn clone(&self) -> Self { *self }
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Copy)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
impl Clone for host_cpu_load_info {
    fn clone(&self) -> Self { *self }
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
pub type vm_prot_t = ::libc::c_int;
pub type vm_sync_t = ::libc::c_uint;
pub type memory_object_offset_t = ::libc::c_ulonglong;
pub type memory_object_size_t = ::libc::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::libc::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::libc::c_int;
pub type memory_object_return_t = ::libc::c_int;
pub type memory_object_info_t = *mut ::libc::c_int;
pub type memory_object_flavor_t = ::libc::c_int;
pub type memory_object_info_data_t = [::libc::c_int; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
impl Clone for memory_object_perf_info {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
impl Clone for memory_object_attr_info {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
impl Clone for memory_object_behave_info {
    fn clone(&self) -> Self { *self }
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
impl Clone for __darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_fp_control {
    pub _bitfield_1: [u8; 2usize],
    pub __bindgen_align: [u16; 0usize],
}
impl Clone for __darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 1u64 as u16;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::libc::c_ushort) {
        let mask = 1u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 2u64 as u16;
        let val = (unit_field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::libc::c_ushort) {
        let mask = 2u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 1usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 4u64 as u16;
        let val = (unit_field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::libc::c_ushort) {
        let mask = 4u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 2usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 8u64 as u16;
        let val = (unit_field_val & mask) >> 3usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::libc::c_ushort) {
        let mask = 8u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 3usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 16u64 as u16;
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::libc::c_ushort) {
        let mask = 16u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 32u64 as u16;
        let val = (unit_field_val & mask) >> 5usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::libc::c_ushort) {
        let mask = 32u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 5usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 768u64 as u16;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::libc::c_ushort) {
        let mask = 768u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 3072u64 as u16;
        let val = (unit_field_val & mask) >> 10usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::libc::c_ushort) {
        let mask = 3072u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 10usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(__invalid: ::libc::c_ushort,
                          __denorm: ::libc::c_ushort,
                          __zdiv: ::libc::c_ushort, __ovrfl: ::libc::c_ushort,
                          __undfl: ::libc::c_ushort,
                          __precis: ::libc::c_ushort, __pc: ::libc::c_ushort,
                          __rc: ::libc::c_ushort) -> u16 {
        ({
             ({
                  ({
                       ({
                            ({
                                 ({
                                      ({
                                           ({ 0 } |
                                                ((__invalid as u16 as u16) <<
                                                     0usize) & (1u64 as u16))
                                       } |
                                           ((__denorm as u16 as u16) <<
                                                1usize) & (2u64 as u16))
                                  } |
                                      ((__zdiv as u16 as u16) << 2usize) &
                                          (4u64 as u16))
                             } |
                                 ((__ovrfl as u16 as u16) << 3usize) &
                                     (8u64 as u16))
                        } |
                            ((__undfl as u16 as u16) << 4usize) &
                                (16u64 as u16))
                   } | ((__precis as u16 as u16) << 5usize) & (32u64 as u16))
              } | ((__pc as u16 as u16) << 8usize) & (768u64 as u16))
         } | ((__rc as u16 as u16) << 10usize) & (3072u64 as u16))
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_fp_status {
    pub _bitfield_1: [u8; 2usize],
    pub __bindgen_align: [u16; 0usize],
}
impl Clone for __darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 1u64 as u16;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::libc::c_ushort) {
        let mask = 1u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 2u64 as u16;
        let val = (unit_field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::libc::c_ushort) {
        let mask = 2u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 1usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 4u64 as u16;
        let val = (unit_field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::libc::c_ushort) {
        let mask = 4u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 2usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 8u64 as u16;
        let val = (unit_field_val & mask) >> 3usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::libc::c_ushort) {
        let mask = 8u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 3usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 16u64 as u16;
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::libc::c_ushort) {
        let mask = 16u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 32u64 as u16;
        let val = (unit_field_val & mask) >> 5usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::libc::c_ushort) {
        let mask = 32u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 5usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 64u64 as u16;
        let val = (unit_field_val & mask) >> 6usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::libc::c_ushort) {
        let mask = 64u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 6usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 128u64 as u16;
        let val = (unit_field_val & mask) >> 7usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::libc::c_ushort) {
        let mask = 128u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 7usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 256u64 as u16;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::libc::c_ushort) {
        let mask = 256u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 512u64 as u16;
        let val = (unit_field_val & mask) >> 9usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::libc::c_ushort) {
        let mask = 512u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 9usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 1024u64 as u16;
        let val = (unit_field_val & mask) >> 10usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::libc::c_ushort) {
        let mask = 1024u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 10usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 14336u64 as u16;
        let val = (unit_field_val & mask) >> 11usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::libc::c_ushort) {
        let mask = 14336u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 11usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 16384u64 as u16;
        let val = (unit_field_val & mask) >> 14usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::libc::c_ushort) {
        let mask = 16384u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 14usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::libc::c_ushort {
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        let mask = 32768u64 as u16;
        let val = (unit_field_val & mask) >> 15usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::libc::c_ushort) {
        let mask = 32768u64 as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u16 as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 15usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u16>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(__invalid: ::libc::c_ushort,
                          __denorm: ::libc::c_ushort,
                          __zdiv: ::libc::c_ushort, __ovrfl: ::libc::c_ushort,
                          __undfl: ::libc::c_ushort,
                          __precis: ::libc::c_ushort,
                          __stkflt: ::libc::c_ushort,
                          __errsumm: ::libc::c_ushort, __c0: ::libc::c_ushort,
                          __c1: ::libc::c_ushort, __c2: ::libc::c_ushort,
                          __tos: ::libc::c_ushort, __c3: ::libc::c_ushort,
                          __busy: ::libc::c_ushort) -> u16 {
        ({
             ({
                  ({
                       ({
                            ({
                                 ({
                                      ({
                                           ({
                                                ({
                                                     ({
                                                          ({
                                                               ({
                                                                    ({
                                                                         ({
                                                                              0
                                                                          } |
                                                                              ((__invalid
                                                                                    as
                                                                                    u16
                                                                                    as
                                                                                    u16)
                                                                                   <<
                                                                                   0usize)
                                                                                  &
                                                                                  (1u64
                                                                                       as
                                                                                       u16))
                                                                     } |
                                                                         ((__denorm
                                                                               as
                                                                               u16
                                                                               as
                                                                               u16)
                                                                              <<
                                                                              1usize)
                                                                             &
                                                                             (2u64
                                                                                  as
                                                                                  u16))
                                                                } |
                                                                    ((__zdiv
                                                                          as
                                                                          u16
                                                                          as
                                                                          u16)
                                                                         <<
                                                                         2usize)
                                                                        &
                                                                        (4u64
                                                                             as
                                                                             u16))
                                                           } |
                                                               ((__ovrfl as
                                                                     u16 as
                                                                     u16) <<
                                                                    3usize) &
                                                                   (8u64 as
                                                                        u16))
                                                      } |
                                                          ((__undfl as u16 as
                                                                u16) <<
                                                               4usize) &
                                                              (16u64 as u16))
                                                 } |
                                                     ((__precis as u16 as u16)
                                                          << 5usize) &
                                                         (32u64 as u16))
                                            } |
                                                ((__stkflt as u16 as u16) <<
                                                     6usize) & (64u64 as u16))
                                       } |
                                           ((__errsumm as u16 as u16) <<
                                                7usize) & (128u64 as u16))
                                  } |
                                      ((__c0 as u16 as u16) << 8usize) &
                                          (256u64 as u16))
                             } |
                                 ((__c1 as u16 as u16) << 9usize) &
                                     (512u64 as u16))
                        } |
                            ((__c2 as u16 as u16) << 10usize) &
                                (1024u64 as u16))
                   } | ((__tos as u16 as u16) << 11usize) & (14336u64 as u16))
              } | ((__c3 as u16 as u16) << 14usize) & (16384u64 as u16))
         } | ((__busy as u16 as u16) << 15usize) & (32768u64 as u16))
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10usize],
    pub __mmst_rsrv: [::libc::c_char; 6usize],
}
impl Clone for __darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16usize],
}
impl Clone for __darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl Clone for __darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
impl Clone for __darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl Clone for __darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
impl Clone for __darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl Clone for __darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl Clone for __darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
impl Clone for __darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl Clone for __darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl Clone for __darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct x86_state_hdr {
    pub flavor: ::libc::c_int,
    pub count: ::libc::c_int,
}
impl Clone for x86_state_hdr {
    fn clone(&self) -> Self { *self }
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
#[repr(C)]
#[derive(Copy)]
pub struct x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: x86_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union x86_thread_state__bindgen_ty_1 {
    pub ts32: x86_thread_state32_t,
    pub ts64: x86_thread_state64_t,
    _bindgen_union_align: [u64; 21usize],
}
impl Clone for x86_thread_state__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for x86_thread_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: x86_float_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union x86_float_state__bindgen_ty_1 {
    pub fs32: x86_float_state32_t,
    pub fs64: x86_float_state64_t,
    _bindgen_union_align: [u32; 131usize],
}
impl Clone for x86_float_state__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for x86_float_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: x86_exception_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union x86_exception_state__bindgen_ty_1 {
    pub es32: x86_exception_state32_t,
    pub es64: x86_exception_state64_t,
    _bindgen_union_align: [u64; 2usize],
}
impl Clone for x86_exception_state__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for x86_exception_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: x86_debug_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union x86_debug_state__bindgen_ty_1 {
    pub ds32: x86_debug_state32_t,
    pub ds64: x86_debug_state64_t,
    _bindgen_union_align: [u64; 8usize],
}
impl Clone for x86_debug_state__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for x86_debug_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union x86_avx_state__bindgen_ty_1 {
    pub as32: x86_avx_state32_t,
    pub as64: x86_avx_state64_t,
    _bindgen_union_align: [u32; 211usize],
}
impl Clone for x86_avx_state__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for x86_avx_state {
    fn clone(&self) -> Self { *self }
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 224usize];
pub type thread_state_flavor_t = ::libc::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_type_t = ::libc::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::libc::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::libc::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t =
    *mut mach_voucher_attr_recipe_command_t;
#[repr(C)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t =
    mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t =
    *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::libc::c_int,
    pub is_master: boolean_t,
}
impl Clone for processor_basic_info {
    fn clone(&self) -> Self { *self }
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::libc::c_uint; 4usize],
}
impl Clone for processor_cpu_load_info {
    fn clone(&self) -> Self { *self }
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct processor_set_basic_info {
    pub processor_count: ::libc::c_int,
    pub default_policy: ::libc::c_int,
}
impl Clone for processor_set_basic_info {
    fn clone(&self) -> Self { *self }
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct processor_set_load_info {
    pub task_count: ::libc::c_int,
    pub thread_count: ::libc::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
impl Clone for processor_set_load_info {
    fn clone(&self) -> Self { *self }
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::libc::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
impl Clone for policy_timeshare_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
impl Clone for policy_timeshare_limit {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl Clone for policy_timeshare_info {
    fn clone(&self) -> Self { *self }
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Copy)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
impl Clone for policy_rr_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
impl Clone for policy_rr_limit {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl Clone for policy_rr_info {
    fn clone(&self) -> Self { *self }
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Copy)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
impl Clone for policy_fifo_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
impl Clone for policy_fifo_limit {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl Clone for policy_fifo_info {
    fn clone(&self) -> Self { *self }
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Copy)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
impl Clone for policy_bases {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
impl Clone for policy_limits {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
impl Clone for policy_infos {
    fn clone(&self) -> Self { *self }
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl Clone for task_basic_info_32 {
    fn clone(&self) -> Self { *self }
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C)]
#[derive(Copy)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl Clone for task_basic_info_64 {
    fn clone(&self) -> Self { *self }
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl Clone for task_basic_info {
    fn clone(&self) -> Self { *self }
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
impl Clone for task_events_info {
    fn clone(&self) -> Self { *self }
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
impl Clone for task_thread_times_info {
    fn clone(&self) -> Self { *self }
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
impl Clone for task_absolutetime_info {
    fn clone(&self) -> Self { *self }
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
impl Clone for task_kernelmemory_info {
    fn clone(&self) -> Self { *self }
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
impl Clone for task_affinity_tag_info {
    fn clone(&self) -> Self { *self }
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
impl Clone for task_dyld_info {
    fn clone(&self) -> Self { *self }
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_extmod_info {
    pub task_uuid: [::libc::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
impl Clone for task_extmod_info {
    fn clone(&self) -> Self { *self }
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C)]
#[derive(Copy)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
impl Clone for mach_task_basic_info {
    fn clone(&self) -> Self { *self }
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
impl Clone for task_power_info {
    fn clone(&self) -> Self { *self }
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
}
impl Clone for task_vm_info {
    fn clone(&self) -> Self { *self }
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
impl Clone for task_trace_memory_info {
    fn clone(&self) -> Self { *self }
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C)]
#[derive(Copy)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
impl Clone for task_wait_state_info {
    fn clone(&self) -> Self { *self }
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C)]
#[derive(Copy)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
impl Clone for gpu_energy_data {
    fn clone(&self) -> Self { *self }
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C)]
#[derive(Copy)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
}
impl Clone for task_power_info_v2 {
    fn clone(&self) -> Self { *self }
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Copy)]
pub struct task_flags_info {
    pub flags: u32,
}
impl Clone for task_flags_info {
    fn clone(&self) -> Self { *self }
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum task_role {
    TASK_RENICED = -1,
    TASK_UNSPECIFIED = 0,
    TASK_FOREGROUND_APPLICATION = 1,
    TASK_BACKGROUND_APPLICATION = 2,
    TASK_CONTROL_APPLICATION = 3,
    TASK_GRAPHICS_SERVER = 4,
    TASK_THROTTLE_APPLICATION = 5,
    TASK_NONUI_APPLICATION = 6,
    TASK_DEFAULT_APPLICATION = 7,
}
pub type task_role_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct task_category_policy {
    pub role: task_role_t,
}
impl Clone for task_category_policy {
    fn clone(&self) -> Self { *self }
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum task_latency_qos {
    LATENCY_QOS_TIER_UNSPECIFIED = 0,
    LATENCY_QOS_TIER_0 = 16711681,
    LATENCY_QOS_TIER_1 = 16711682,
    LATENCY_QOS_TIER_2 = 16711683,
    LATENCY_QOS_TIER_3 = 16711684,
    LATENCY_QOS_TIER_4 = 16711685,
    LATENCY_QOS_TIER_5 = 16711686,
}
pub type task_latency_qos_t = integer_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum task_throughput_qos {
    THROUGHPUT_QOS_TIER_UNSPECIFIED = 0,
    THROUGHPUT_QOS_TIER_0 = 16646145,
    THROUGHPUT_QOS_TIER_1 = 16646146,
    THROUGHPUT_QOS_TIER_2 = 16646147,
    THROUGHPUT_QOS_TIER_3 = 16646148,
    THROUGHPUT_QOS_TIER_4 = 16646149,
    THROUGHPUT_QOS_TIER_5 = 16646150,
}
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
impl Clone for task_qos_policy {
    fn clone(&self) -> Self { *self }
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::libc::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Copy)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
impl Clone for thread_basic_info {
    fn clone(&self) -> Self { *self }
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
impl Clone for thread_identifier_info {
    fn clone(&self) -> Self { *self }
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Copy)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::libc::c_char; 64usize],
}
impl Clone for thread_extended_info {
    fn clone(&self) -> Self { *self }
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Copy)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
impl Clone for io_stat_entry {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
impl Clone for io_stat_info {
    fn clone(&self) -> Self { *self }
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
impl Clone for thread_standard_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Copy)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
impl Clone for thread_extended_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Copy)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
impl Clone for thread_time_constraint_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Copy)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
impl Clone for thread_precedence_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Copy)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
impl Clone for thread_affinity_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Copy)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
impl Clone for thread_background_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
impl Clone for thread_latency_qos_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
impl Clone for thread_throughput_qos_policy {
    fn clone(&self) -> Self { *self }
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::libc::c_int;
pub type sleep_type_t = ::libc::c_int;
pub type clock_id_t = ::libc::c_int;
pub type clock_flavor_t = ::libc::c_int;
pub type clock_attr_t = *mut ::libc::c_int;
pub type clock_res_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct mach_timespec {
    pub tv_sec: ::libc::c_uint,
    pub tv_nsec: clock_res_t,
}
impl Clone for mach_timespec {
    fn clone(&self) -> Self { *self }
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::libc::c_uint;
pub type vm_machine_attribute_val_t = ::libc::c_int;
pub type vm_inherit_t = ::libc::c_uint;
pub type vm_purgable_t = ::libc::c_int;
pub type vm_behavior_t = ::libc::c_int;
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::libc::c_int;
pub type vm_region_info_64_t = *mut ::libc::c_int;
pub type vm_region_recurse_info_t = *mut ::libc::c_int;
pub type vm_region_recurse_info_64_t = *mut ::libc::c_int;
pub type vm_region_flavor_t = ::libc::c_int;
pub type vm_region_info_data_t = [::libc::c_int; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl Clone for vm_region_basic_info_64 {
    fn clone(&self) -> Self { *self }
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl Clone for vm_region_basic_info {
    fn clone(&self) -> Self { *self }
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::libc::c_uint,
    pub pages_resident: ::libc::c_uint,
    pub pages_shared_now_private: ::libc::c_uint,
    pub pages_swapped_out: ::libc::c_uint,
    pub pages_dirtied: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
    pub pages_reusable: ::libc::c_uint,
}
impl Clone for vm_region_extended_info {
    fn clone(&self) -> Self { *self }
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Copy)]
pub struct vm_region_top_info {
    pub obj_id: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub private_pages_resident: ::libc::c_uint,
    pub shared_pages_resident: ::libc::c_uint,
    pub share_mode: ::libc::c_uchar,
}
impl Clone for vm_region_top_info {
    fn clone(&self) -> Self { *self }
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Copy)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::libc::c_uint,
    pub pages_resident: ::libc::c_uint,
    pub pages_shared_now_private: ::libc::c_uint,
    pub pages_swapped_out: ::libc::c_uint,
    pub pages_dirtied: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl Clone for vm_region_submap_info {
    fn clone(&self) -> Self { *self }
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C)]
#[derive(Copy)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::libc::c_uint,
    pub pages_resident: ::libc::c_uint,
    pub pages_shared_now_private: ::libc::c_uint,
    pub pages_swapped_out: ::libc::c_uint,
    pub pages_dirtied: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::libc::c_ushort,
    pub pages_reusable: ::libc::c_uint,
}
impl Clone for vm_region_submap_info_64 {
    fn clone(&self) -> Self { *self }
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::libc::c_uint,
    pub ref_count: ::libc::c_uint,
    pub shadow_depth: ::libc::c_ushort,
    pub external_pager: ::libc::c_uchar,
    pub share_mode: ::libc::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::libc::c_ushort,
}
impl Clone for vm_region_submap_short_info_64 {
    fn clone(&self) -> Self { *self }
}
pub type vm_region_submap_short_info_64_t =
    *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t =
    vm_region_submap_short_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
impl Clone for mach_vm_read_entry {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
impl Clone for vm_read_entry {
    fn clone(&self) -> Self { *self }
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::libc::c_int;
pub type vm_page_info_data_t = [::libc::c_int; 0usize];
pub type vm_page_info_flavor_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct vm_page_info_basic {
    pub disposition: ::libc::c_int,
    pub ref_count: ::libc::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::libc::c_int,
    pub __pad: ::libc::c_int,
}
impl Clone for vm_page_info_basic {
    fn clone(&self) -> Self { *self }
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::libc::c_char; 64usize],
    pub version: [::libc::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
impl Clone for kmod_info {
    fn clone(&self) -> Self { *self }
}
pub type kmod_start_func_t =
    ::std::option::Option<unsafe extern "C" fn(ki: *mut kmod_info,
                                               data: *mut ::libc::c_void)
                              -> kern_return_t>;
pub type kmod_stop_func_t =
    ::std::option::Option<unsafe extern "C" fn(ki: *mut kmod_info,
                                               data: *mut ::libc::c_void)
                              -> kern_return_t>;
#[repr(C)]
#[derive(Copy)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
impl Clone for kmod_reference {
    fn clone(&self) -> Self { *self }
}
pub type kmod_reference_t = kmod_reference;
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Copy)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
impl Clone for kmod_info_32_v1 {
    fn clone(&self) -> Self { *self }
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C)]
#[derive(Copy)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
impl Clone for kmod_info_64_v1 {
    fn clone(&self) -> Self { *self }
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::libc::c_void;
pub type kmod_control_flavor_t = ::libc::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_master_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::libc::c_char;
pub type labelstr_t = *mut ::libc::c_char;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn memchr(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                  arg3: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn memcpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memmove(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memset(arg1: *mut ::libc::c_void, arg2: ::libc::c_int, arg3: usize)
     -> *mut ::libc::c_void;
}
extern "C" {
    pub fn strcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
}
extern "C" {
    pub fn strcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_ulong;
}
extern "C" {
    pub fn strerror(arg1: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const ::libc::c_char) -> ::libc::c_ulong;
}
extern "C" {
    pub fn strncat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strncmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn strncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strpbrk(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_ulong;
}
extern "C" {
    pub fn strstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strtok(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strxfrm(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> ::libc::c_ulong;
}
extern "C" {
    pub fn strtok_r(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strerror_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                      arg3: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn memccpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: ::libc::c_int, arg4: usize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn stpcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn stpncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strndup(arg1: *const ::libc::c_char, arg2: usize)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const ::libc::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strsignal(sig: ::libc::c_int) -> *mut ::libc::c_char;
}
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::libc::c_int;
extern "C" {
    pub fn memset_s(arg1: *mut ::libc::c_void, arg2: rsize_t,
                    arg3: ::libc::c_int, arg4: rsize_t) -> errno_t;
}
extern "C" {
    pub fn memmem(arg1: *const ::libc::c_void, arg2: usize,
                  arg3: *const ::libc::c_void, arg4: usize)
     -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memset_pattern4(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: usize);
}
extern "C" {
    pub fn memset_pattern8(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: usize);
}
extern "C" {
    pub fn memset_pattern16(arg1: *mut ::libc::c_void,
                            arg2: *const ::libc::c_void, arg3: usize);
}
extern "C" {
    pub fn strcasestr(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strnstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strlcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> ::libc::c_ulong;
}
extern "C" {
    pub fn strlcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: usize) -> ::libc::c_ulong;
}
extern "C" {
    pub fn strmode(arg1: ::libc::c_int, arg2: *mut ::libc::c_char);
}
extern "C" {
    pub fn strsep(arg1: *mut *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn swab(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                arg3: isize);
}
extern "C" {
    pub fn bcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                arg3: usize) -> ::libc::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                 arg3: usize);
}
extern "C" {
    pub fn bzero(arg1: *mut ::libc::c_void, arg2: usize);
}
extern "C" {
    pub fn index(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn rindex(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn strcasecmp(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn strncasecmp(arg1: *const ::libc::c_char,
                       arg2: *const ::libc::c_char, arg3: usize)
     -> ::libc::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
}
extern "C" {
    pub fn fls(arg1: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
}
pub const OSUnknownByteOrder: _bindgen_ty_1 =
    _bindgen_ty_1::OSUnknownByteOrder;
pub const OSLittleEndian: _bindgen_ty_1 = _bindgen_ty_1::OSLittleEndian;
pub const OSBigEndian: _bindgen_ty_1 = _bindgen_ty_1::OSBigEndian;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    OSUnknownByteOrder = 0,
    OSLittleEndian = 1,
    OSBigEndian = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct NDR_record_t {
    pub mig_vers: ::libc::c_uchar,
    pub if_vers: ::libc::c_uchar,
    pub reserved1: ::libc::c_uchar,
    pub mig_encoding: ::libc::c_uchar,
    pub int_rep: ::libc::c_uchar,
    pub char_rep: ::libc::c_uchar,
    pub float_rep: ::libc::c_uchar,
    pub reserved2: ::libc::c_uchar,
}
impl Clone for NDR_record_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "NDR_record"]
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Copy)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl Clone for mach_port_deleted_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl Clone for mach_send_possible_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl Clone for mach_port_destroyed_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl Clone for mach_no_senders_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl Clone for mach_send_once_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl Clone for mach_dead_name_notification_t {
    fn clone(&self) -> Self { *self }
}
pub type mig_stub_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP:
                                                   *mut mach_msg_header_t,
                                               OutHeadP:
                                                   *mut mach_msg_header_t)>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP:
                                                   *mut mach_msg_header_t)
                              -> mig_routine_t>;
pub type mig_impl_routine_t =
    ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Copy)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::libc::c_uint,
    pub descr_count: ::libc::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::libc::c_uint,
}
impl Clone for routine_descriptor {
    fn clone(&self) -> Self { *self }
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Copy)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
impl Clone for mig_subsystem {
    fn clone(&self) -> Self { *self }
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Copy)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::libc::c_char,
    pub ms_routine_number: ::libc::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
impl Clone for mig_symtab {
    fn clone(&self) -> Self { *self }
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(dest: *mut ::libc::c_char, src: *const ::libc::c_char,
                       len: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Copy)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for mig_reply_error_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t)
     -> kern_return_t;
}
extern "C" {
    pub fn clock_set_attributes(clock_ctrl: clock_ctrl_t,
                                flavor: clock_flavor_t,
                                clock_attr: clock_attr_t,
                                clock_attrCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
impl Clone for __Request__clock_set_time_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::libc::c_int; 1usize],
}
impl Clone for __Request__clock_set_attributes_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
    _bindgen_union_align: [u32; 11usize],
}
impl Clone for __RequestUnion__clock_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__clock_set_time_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__clock_set_attributes_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
    _bindgen_union_align: [u32; 9usize],
}
impl Clone for __ReplyUnion__clock_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
impl Clone for ipc_info_space {
    fn clone(&self) -> Self { *self }
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Copy)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
impl Clone for ipc_info_space_basic {
    fn clone(&self) -> Self { *self }
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Copy)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
impl Clone for ipc_info_name {
    fn clone(&self) -> Self { *self }
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
impl Clone for ipc_info_tree_name {
    fn clone(&self) -> Self { *self }
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
impl Clone for mach_vm_info_region {
    fn clone(&self) -> Self { *self }
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C)]
#[derive(Copy)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
impl Clone for vm_info_region_64 {
    fn clone(&self) -> Self { *self }
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Copy)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
impl Clone for vm_info_region {
    fn clone(&self) -> Self { *self }
}
pub type vm_info_region_t = vm_info_region;
#[repr(C)]
#[derive(Copy)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::libc::c_uint,
    pub vio_resident_page_count: ::libc::c_uint,
    pub vio_absent_count: ::libc::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::libc::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
impl Clone for vm_info_object {
    fn clone(&self) -> Self { *self }
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Copy)]
pub struct zone_name {
    pub zn_name: [::libc::c_char; 80usize],
}
impl Clone for zone_name {
    fn clone(&self) -> Self { *self }
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
impl Clone for zone_info {
    fn clone(&self) -> Self { *self }
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct mach_zone_name {
    pub mzn_name: [::libc::c_char; 80usize],
}
impl Clone for mach_zone_name {
    fn clone(&self) -> Self { *self }
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
impl Clone for mach_zone_info_data {
    fn clone(&self) -> Self { *self }
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
impl Clone for task_zone_info_data {
    fn clone(&self) -> Self { *self }
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub _resv: [u64; 3usize],
}
impl Clone for mach_memory_info {
    fn clone(&self) -> Self { *self }
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Copy)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
impl Clone for hash_info_bucket {
    fn clone(&self) -> Self { *self }
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Copy)]
pub struct lockgroup_info {
    pub lockgroup_name: [::libc::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
impl Clone for lockgroup_info {
    fn clone(&self) -> Self { *self }
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::libc::c_char; 32usize];
#[repr(C)]
#[derive(Copy)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub gzip_offset: u64,
    pub gzip_length: u64,
}
impl Clone for mach_core_fileheader {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn host_get_boot_info(host_priv: host_priv_t,
                              boot_info: *mut ::libc::c_char)
     -> kern_return_t;
}
extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn host_priv_statistics(host_priv: host_priv_t, flavor: host_flavor_t,
                                host_info_out: host_info_t,
                                host_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_default_memory_manager(host_priv: host_priv_t,
                                       default_manager:
                                           *mut memory_object_default_t,
                                       cluster_size:
                                           memory_object_cluster_size_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_wire(host_priv: host_priv_t, task: vm_map_t,
                   address: vm_address_t, size: vm_size_t,
                   desired_access: vm_prot_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_wire(host_priv: host_priv_t, thread: thread_act_t,
                       wired: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate_cpm(host_priv: host_priv_t, task: vm_map_t,
                           address: *mut vm_address_t, size: vm_size_t,
                           flags: ::libc::c_int) -> kern_return_t;
}
extern "C" {
    pub fn host_processors(host_priv: host_priv_t,
                           out_processor_list: *mut processor_array_t,
                           out_processor_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_control(host_priv: host_priv_t,
                                  clock_id: clock_id_t,
                                  clock_ctrl: *mut clock_ctrl_t)
     -> kern_return_t;
}
extern "C" {
    pub fn kmod_create(host_priv: host_priv_t, info: vm_address_t,
                       module: *mut kmod_t) -> kern_return_t;
}
extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t)
     -> kern_return_t;
}
extern "C" {
    pub fn kmod_control(host_priv: host_priv_t, module: kmod_t,
                        flavor: kmod_control_flavor_t, data: *mut kmod_args_t,
                        dataCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_special_port(host_priv: host_priv_t, node: ::libc::c_int,
                                 which: ::libc::c_int, port: *mut mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_set_special_port(host_priv: host_priv_t, which: ::libc::c_int,
                                 port: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn host_set_exception_ports(host_priv: host_priv_t,
                                    exception_mask: exception_mask_t,
                                    new_port: mach_port_t,
                                    behavior: exception_behavior_t,
                                    new_flavor: thread_state_flavor_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_exception_ports(host_priv: host_priv_t,
                                    exception_mask: exception_mask_t,
                                    masks: exception_mask_array_t,
                                    masksCnt: *mut mach_msg_type_number_t,
                                    old_handlers: exception_handler_array_t,
                                    old_behaviors: exception_behavior_array_t,
                                    old_flavors: exception_flavor_array_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_swap_exception_ports(host_priv: host_priv_t,
                                     exception_mask: exception_mask_t,
                                     new_port: mach_port_t,
                                     behavior: exception_behavior_t,
                                     new_flavor: thread_state_flavor_t,
                                     masks: exception_mask_array_t,
                                     masksCnt: *mut mach_msg_type_number_t,
                                     old_handlerss: exception_handler_array_t,
                                     old_behaviors:
                                         exception_behavior_array_t,
                                     old_flavors: exception_flavor_array_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_wire(host_priv: host_priv_t, task: vm_map_t,
                        address: mach_vm_address_t, size: mach_vm_size_t,
                        desired_access: vm_prot_t) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_sets(host_priv: host_priv_t,
                               processor_sets:
                                   *mut processor_set_name_array_t,
                               processor_setsCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_processor_set_priv(host_priv: host_priv_t,
                                   set_name: processor_set_name_t,
                                   set: *mut processor_set_t)
     -> kern_return_t;
}
extern "C" {
    pub fn set_dp_control_port(host: host_priv_t, control_port: mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn get_dp_control_port(host: host_priv_t,
                               contorl_port: *mut mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef)
     -> kern_return_t;
}
extern "C" {
    pub fn kext_request(host_priv: host_priv_t, user_log_flags: u32,
                        request_data: vm_offset_t,
                        request_dataCnt: mach_msg_type_number_t,
                        response_data: *mut vm_offset_t,
                        response_dataCnt: *mut mach_msg_type_number_t,
                        log_data: *mut vm_offset_t,
                        log_dataCnt: *mut mach_msg_type_number_t,
                        op_result: *mut kern_return_t) -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_get_boot_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::libc::c_int,
}
impl Clone for __Request__host_reboot_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__host_priv_statistics_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
impl Clone for __Request__host_default_memory_manager_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
impl Clone for __Request__vm_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
impl Clone for __Request__thread_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::libc::c_int,
}
impl Clone for __Request__vm_allocate_cpm_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_processors_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
impl Clone for __Request__host_get_clock_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
impl Clone for __Request__kmod_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
impl Clone for __Request__kmod_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl Clone for __Request__kmod_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::libc::c_int,
    pub which: ::libc::c_int,
}
impl Clone for __Request__host_get_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::libc::c_int,
}
impl Clone for __Request__host_set_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl Clone for __Request__host_set_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
impl Clone for __Request__host_get_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl Clone for __Request__host_swap_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
impl Clone for __Request__mach_vm_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_processor_sets_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
impl Clone for __Request__host_processor_set_priv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__set_dp_control_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub control_port: mach_msg_port_descriptor_t,
}
impl Clone for __Request__set_dp_control_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__get_dp_control_port_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__get_dp_control_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
impl Clone for __Request__host_set_UNDServer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_get_UNDServer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
impl Clone for __Request__kext_request_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_set_dp_control_port: __Request__set_dp_control_port_t,
    pub Request_get_dp_control_port: __Request__get_dp_control_port_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
    _bindgen_union_align: [u32; 17usize],
}
impl Clone for __RequestUnion__host_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::libc::c_char; 4096usize],
}
impl Clone for __Reply__host_get_boot_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_reboot_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
impl Clone for __Reply__host_priv_statistics_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_default_memory_manager_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl Clone for __Reply__vm_allocate_cpm_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__host_processors_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_get_clock_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
impl Clone for __Reply__kmod_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__kmod_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__kmod_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_get_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_set_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_set_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl Clone for __Reply__host_get_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl Clone for __Reply__host_swap_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_vm_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__host_processor_sets_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_processor_set_priv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__set_dp_control_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__set_dp_control_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__get_dp_control_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub contorl_port: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__get_dp_control_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_set_UNDServer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_get_UNDServer_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
impl Clone for __Reply__kext_request_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_set_dp_control_port: __Reply__set_dp_control_port_t,
    pub Reply_get_dp_control_port: __Reply__get_dp_control_port_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
    _bindgen_union_align: [u32; 1035usize],
}
impl Clone for __ReplyUnion__host_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn host_security_create_task_token(host_security: host_security_t,
                                           parent_task: task_t,
                                           sec_token: security_token_t,
                                           audit_token: audit_token_t,
                                           host: host_t,
                                           ledgers: ledger_array_t,
                                           ledgersCnt: mach_msg_type_number_t,
                                           inherit_memory: boolean_t,
                                           child_task: *mut task_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_security_set_task_token(host_security: host_security_t,
                                        target_task: task_t,
                                        sec_token: security_token_t,
                                        audit_token: audit_token_t,
                                        host: host_t) -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
impl Clone for __Request__host_security_create_task_token_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
impl Clone for __Request__host_security_set_task_token_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
    _bindgen_union_align: [u32; 31usize],
}
impl Clone for __RequestUnion__host_security_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_security_create_task_token_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_security_set_task_token_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
    _bindgen_union_align: [u32; 10usize],
}
impl Clone for __ReplyUnion__host_security_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn lock_acquire(lock_set: lock_set_t, lock_id: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn lock_release(lock_set: lock_set_t, lock_id: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn lock_try(lock_set: lock_set_t, lock_id: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn lock_make_stable(lock_set: lock_set_t, lock_id: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn lock_handoff(lock_set: lock_set_t, lock_id: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn lock_handoff_accept(lock_set: lock_set_t, lock_id: ::libc::c_int)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_acquire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl Clone for __Request__lock_acquire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_release_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl Clone for __Request__lock_release_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_try_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl Clone for __Request__lock_try_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_make_stable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl Clone for __Request__lock_make_stable_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_handoff_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl Clone for __Request__lock_handoff_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_handoff_accept_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::libc::c_int,
}
impl Clone for __Request__lock_handoff_accept_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__lock_set_subsystem {
    pub Request_lock_acquire: __Request__lock_acquire_t,
    pub Request_lock_release: __Request__lock_release_t,
    pub Request_lock_try: __Request__lock_try_t,
    pub Request_lock_make_stable: __Request__lock_make_stable_t,
    pub Request_lock_handoff: __Request__lock_handoff_t,
    pub Request_lock_handoff_accept: __Request__lock_handoff_accept_t,
    _bindgen_union_align: [u32; 9usize],
}
impl Clone for __RequestUnion__lock_set_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_acquire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__lock_acquire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_release_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__lock_release_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_try_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__lock_try_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_make_stable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__lock_make_stable_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_handoff_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__lock_handoff_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_handoff_accept_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__lock_handoff_accept_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__lock_set_subsystem {
    pub Reply_lock_acquire: __Reply__lock_acquire_t,
    pub Reply_lock_release: __Reply__lock_release_t,
    pub Reply_lock_try: __Reply__lock_try_t,
    pub Reply_lock_make_stable: __Reply__lock_make_stable_t,
    pub Reply_lock_handoff: __Reply__lock_handoff_t,
    pub Reply_lock_handoff_accept: __Reply__lock_handoff_accept_t,
    _bindgen_union_align: [u32; 9usize],
}
impl Clone for __ReplyUnion__lock_set_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_info(processor: processor_t, flavor: processor_flavor_t,
                          host: *mut host_t,
                          processor_info_out: processor_info_t,
                          processor_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_control(processor: processor_t,
                             processor_cmd: processor_info_t,
                             processor_cmdCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_assign(processor: processor_t, new_set: processor_set_t,
                            wait: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_get_assignment(processor: processor_t,
                                    assigned_set: *mut processor_set_name_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_start_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_exit_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__processor_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 12usize],
}
impl Clone for __Request__processor_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
impl Clone for __Request__processor_assign_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_get_assignment_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
    _bindgen_union_align: [u32; 21usize],
}
impl Clone for __RequestUnion__processor_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_start_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_exit_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 12usize],
}
impl Clone for __Reply__processor_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_assign_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__processor_get_assignment_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
    _bindgen_union_align: [u32; 25usize],
}
impl Clone for __ReplyUnion__processor_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn processor_set_statistics(pset: processor_set_name_t,
                                    flavor: processor_set_flavor_t,
                                    info_out: processor_set_info_t,
                                    info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_max_priority(processor_set: processor_set_t,
                                      max_priority: ::libc::c_int,
                                      change_threads: boolean_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_enable(processor_set: processor_set_t,
                                       policy: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_disable(processor_set: processor_set_t,
                                        policy: ::libc::c_int,
                                        change_threads: boolean_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks(processor_set: processor_set_t,
                               task_list: *mut task_array_t,
                               task_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_threads(processor_set: processor_set_t,
                                 thread_list: *mut thread_act_array_t,
                                 thread_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_control(pset: processor_set_t,
                                        flavor: processor_set_flavor_t,
                                        policy_info: processor_set_info_t,
                                        policy_infoCnt:
                                            mach_msg_type_number_t,
                                        change: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_stack_usage(pset: processor_set_t,
                                     ltotal: *mut ::libc::c_uint,
                                     space: *mut vm_size_t,
                                     resident: *mut vm_size_t,
                                     maxusage: *mut vm_size_t,
                                     maxstack: *mut vm_offset_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_info(set_name: processor_set_name_t,
                              flavor: ::libc::c_int, host: *mut host_t,
                              info_out: processor_set_info_t,
                              info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__processor_set_statistics_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_set_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::libc::c_int,
    pub change_threads: boolean_t,
}
impl Clone for __Request__processor_set_max_priority_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::libc::c_int,
}
impl Clone for __Request__processor_set_policy_enable_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::libc::c_int,
    pub change_threads: boolean_t,
}
impl Clone for __Request__processor_set_policy_disable_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_set_tasks_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_set_threads_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
impl Clone for __Request__processor_set_policy_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_set_stack_usage_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::libc::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__processor_set_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    _bindgen_union_align: [u32; 16usize],
}
impl Clone for __RequestUnion__processor_set_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
impl Clone for __Reply__processor_set_statistics_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_set_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_set_max_priority_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_set_policy_enable_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_set_policy_disable_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__processor_set_tasks_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__processor_set_threads_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__processor_set_policy_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::libc::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
impl Clone for __Reply__processor_set_stack_usage_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
impl Clone for __Reply__processor_set_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    _bindgen_union_align: [u32; 18usize],
}
impl Clone for __ReplyUnion__processor_set_subsystem {
    fn clone(&self) -> Self { *self }
}
pub type sync_policy_t = ::libc::c_int;
extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t,
                               wait_time: mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait_signal(wait_semaphore: semaphore_t,
                                      signal_semaphore: semaphore_t,
                                      wait_time: mach_timespec_t)
     -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait_signal(wait_semaphore: semaphore_t,
                                 signal_semaphore: semaphore_t)
     -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_create(target_task: task_t, ledgers: ledger_array_t,
                       ledgersCnt: mach_msg_type_number_t,
                       inherit_memory: boolean_t, child_task: *mut task_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_threads(target_task: task_t,
                        act_list: *mut thread_act_array_t,
                        act_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_register(target_task: task_t,
                               init_port_set: mach_port_array_t,
                               init_port_setCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_lookup(target_task: task_t,
                             init_port_set: *mut mach_port_array_t,
                             init_port_setCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_info(target_task: task_name_t, flavor: task_flavor_t,
                     task_info_out: task_info_t,
                     task_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_info(target_task: task_t, flavor: task_flavor_t,
                         task_info_in: task_info_t,
                         task_info_inCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_suspend(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_resume(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_special_port(task: task_t, which_port: ::libc::c_int,
                                 special_port: *mut mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_special_port(task: task_t, which_port: ::libc::c_int,
                                 special_port: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_create_running(parent_task: task_t,
                                 flavor: thread_state_flavor_t,
                                 new_state: thread_state_t,
                                 new_stateCnt: mach_msg_type_number_t,
                                 child_act: *mut thread_act_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_exception_ports(task: task_t,
                                    exception_mask: exception_mask_t,
                                    new_port: mach_port_t,
                                    behavior: exception_behavior_t,
                                    new_flavor: thread_state_flavor_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports(task: task_t,
                                    exception_mask: exception_mask_t,
                                    masks: exception_mask_array_t,
                                    masksCnt: *mut mach_msg_type_number_t,
                                    old_handlers: exception_handler_array_t,
                                    old_behaviors: exception_behavior_array_t,
                                    old_flavors: exception_flavor_array_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_swap_exception_ports(task: task_t,
                                     exception_mask: exception_mask_t,
                                     new_port: mach_port_t,
                                     behavior: exception_behavior_t,
                                     new_flavor: thread_state_flavor_t,
                                     masks: exception_mask_array_t,
                                     masksCnt: *mut mach_msg_type_number_t,
                                     old_handlerss: exception_handler_array_t,
                                     old_behaviors:
                                         exception_behavior_array_t,
                                     old_flavors: exception_flavor_array_t)
     -> kern_return_t;
}
extern "C" {
    pub fn lock_set_create(task: task_t, new_lock_set: *mut lock_set_t,
                           n_ulocks: ::libc::c_int, policy: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t)
     -> kern_return_t;
}
extern "C" {
    pub fn semaphore_create(task: task_t, semaphore: *mut semaphore_t,
                            policy: ::libc::c_int, value: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_policy_set(task: task_t, flavor: task_policy_flavor_t,
                           policy_info: task_policy_t,
                           policy_infoCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_policy_get(task: task_t, flavor: task_policy_flavor_t,
                           policy_info: task_policy_t,
                           policy_infoCnt: *mut mach_msg_type_number_t,
                           get_default: *mut boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy(task: task_t, policy: policy_t, base: policy_base_t,
                       baseCnt: mach_msg_type_number_t, set_limit: boolean_t,
                       change: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation(target_port: task_t,
                              routine_entry_pt: vm_address_t,
                              routine_number: ::libc::c_int) -> kern_return_t;
}
extern "C" {
    pub fn task_get_emulation_vector(task: task_t,
                                     vector_start: *mut ::libc::c_int,
                                     emulation_vector:
                                         *mut emulation_vector_t,
                                     emulation_vectorCnt:
                                         *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation_vector(task: task_t,
                                     vector_start: ::libc::c_int,
                                     emulation_vector: emulation_vector_t,
                                     emulation_vectorCnt:
                                         mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_ras_pc(target_task: task_t, basepc: vm_address_t,
                           boundspc: vm_address_t) -> kern_return_t;
}
extern "C" {
    pub fn task_zone_info(target_task: task_t,
                          names: *mut mach_zone_name_array_t,
                          namesCnt: *mut mach_msg_type_number_t,
                          info: *mut task_zone_info_array_t,
                          infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_assign(task: task_t, new_set: processor_set_t,
                       assign_threads: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_get_assignment(task: task_t,
                               assigned_set: *mut processor_set_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_policy(task: task_t, pset: processor_set_t,
                           policy: policy_t, base: policy_base_t,
                           baseCnt: mach_msg_type_number_t,
                           limit: policy_limit_t,
                           limitCnt: mach_msg_type_number_t,
                           change: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_state(task: task_t, flavor: thread_state_flavor_t,
                          old_state: thread_state_t,
                          old_stateCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_state(task: task_t, flavor: thread_state_flavor_t,
                          new_state: thread_state_t,
                          new_stateCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_phys_footprint_limit(task: task_t,
                                         new_limit: ::libc::c_int,
                                         old_limit: *mut ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn task_suspend2(target_task: task_t,
                         suspend_token: *mut task_suspension_token_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_purgable_info(task: task_t, stats: *mut task_purgable_info_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_get_mach_voucher(task: task_t, which: mach_voucher_selector_t,
                                 voucher: *mut ipc_voucher_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_swap_mach_voucher(task: task_t, new_voucher: ipc_voucher_t,
                                  old_voucher: *mut ipc_voucher_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
impl Clone for __Request__task_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_terminate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_threads_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
impl Clone for __Request__mach_ports_register_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__mach_ports_lookup_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__task_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 52usize],
}
impl Clone for __Request__task_set_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_suspend_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_resume_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::libc::c_int,
}
impl Clone for __Request__task_get_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::libc::c_int,
}
impl Clone for __Request__task_set_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl Clone for __Request__thread_create_running_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl Clone for __Request__task_set_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
impl Clone for __Request__task_get_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl Clone for __Request__task_swap_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::libc::c_int,
    pub policy: ::libc::c_int,
}
impl Clone for __Request__lock_set_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
impl Clone for __Request__lock_set_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::libc::c_int,
    pub value: ::libc::c_int,
}
impl Clone for __Request__semaphore_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
impl Clone for __Request__semaphore_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
impl Clone for __Request__task_policy_set_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
impl Clone for __Request__task_policy_get_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
impl Clone for __Request__task_sample_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
impl Clone for __Request__task_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::libc::c_int,
}
impl Clone for __Request__task_set_emulation_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_get_emulation_vector_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::libc::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
impl Clone for __Request__task_set_emulation_vector_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
impl Clone for __Request__task_set_ras_pc_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_zone_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
impl Clone for __Request__task_assign_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
impl Clone for __Request__task_assign_default_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_get_assignment_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
impl Clone for __Request__task_set_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
impl Clone for __Request__task_get_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl Clone for __Request__task_set_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::libc::c_int,
}
impl Clone for __Request__task_set_phys_footprint_limit_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_suspend2_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_resume2_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__task_purgable_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
impl Clone for __Request__task_get_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Request__task_set_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Request__task_swap_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    _bindgen_union_align: [u32; 234usize],
}
impl Clone for __RequestUnion__task_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__task_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_terminate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__task_threads_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_ports_register_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_ports_lookup_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 52usize],
}
impl Clone for __Reply__task_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_suspend_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_resume_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__task_get_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__thread_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__thread_create_running_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl Clone for __Reply__task_get_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl Clone for __Reply__task_swap_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__lock_set_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__lock_set_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__semaphore_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__semaphore_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_policy_set_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
impl Clone for __Reply__task_policy_get_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_sample_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_emulation_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::libc::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__task_get_emulation_vector_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_emulation_vector_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_ras_pc_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__task_zone_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_assign_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_assign_default_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__task_get_assignment_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 224usize],
}
impl Clone for __Reply__task_get_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::libc::c_int,
}
impl Clone for __Reply__task_set_phys_footprint_limit_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__task_suspend2_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_resume2_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
impl Clone for __Reply__task_purgable_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__task_get_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__task_swap_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    _bindgen_union_align: [u32; 234usize],
}
impl Clone for __ReplyUnion__task_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn act_get_state(target_act: thread_act_t, flavor: ::libc::c_int,
                         old_state: thread_state_t,
                         old_stateCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn act_set_state(target_act: thread_act_t, flavor: ::libc::c_int,
                         new_state: thread_state_t,
                         new_stateCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_get_state(target_act: thread_act_t,
                            flavor: thread_state_flavor_t,
                            old_state: thread_state_t,
                            old_stateCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_set_state(target_act: thread_act_t,
                            flavor: thread_state_flavor_t,
                            new_state: thread_state_t,
                            new_stateCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_suspend(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_resume(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_special_port(thr_act: thread_act_t,
                                   which_port: ::libc::c_int,
                                   special_port: *mut mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_set_special_port(thr_act: thread_act_t,
                                   which_port: ::libc::c_int,
                                   special_port: mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_info(target_act: thread_act_t, flavor: thread_flavor_t,
                       thread_info_out: thread_info_t,
                       thread_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_set_exception_ports(thread: thread_act_t,
                                      exception_mask: exception_mask_t,
                                      new_port: mach_port_t,
                                      behavior: exception_behavior_t,
                                      new_flavor: thread_state_flavor_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports(thread: thread_act_t,
                                      exception_mask: exception_mask_t,
                                      masks: exception_mask_array_t,
                                      masksCnt: *mut mach_msg_type_number_t,
                                      old_handlers: exception_handler_array_t,
                                      old_behaviors:
                                          exception_behavior_array_t,
                                      old_flavors: exception_flavor_array_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_exception_ports(thread: thread_act_t,
                                       exception_mask: exception_mask_t,
                                       new_port: mach_port_t,
                                       behavior: exception_behavior_t,
                                       new_flavor: thread_state_flavor_t,
                                       masks: exception_mask_array_t,
                                       masksCnt: *mut mach_msg_type_number_t,
                                       old_handlers:
                                           exception_handler_array_t,
                                       old_behaviors:
                                           exception_behavior_array_t,
                                       old_flavors: exception_flavor_array_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_policy(thr_act: thread_act_t, policy: policy_t,
                         base: policy_base_t, baseCnt: mach_msg_type_number_t,
                         set_limit: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_set(thread: thread_act_t,
                             flavor: thread_policy_flavor_t,
                             policy_info: thread_policy_t,
                             policy_infoCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_get(thread: thread_act_t,
                             flavor: thread_policy_flavor_t,
                             policy_info: thread_policy_t,
                             policy_infoCnt: *mut mach_msg_type_number_t,
                             get_default: *mut boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t,
                             trace_status: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_assignment(thread: thread_act_t,
                                 assigned_set: *mut processor_set_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_set_policy(thr_act: thread_act_t, pset: processor_set_t,
                             policy: policy_t, base: policy_base_t,
                             baseCnt: mach_msg_type_number_t,
                             limit: policy_limit_t,
                             limitCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_get_mach_voucher(thr_act: thread_act_t,
                                   which: mach_voucher_selector_t,
                                   voucher: *mut ipc_voucher_t)
     -> kern_return_t;
}
extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t,
                                   voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_mach_voucher(thr_act: thread_act_t,
                                    new_voucher: ipc_voucher_t,
                                    old_voucher: *mut ipc_voucher_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_terminate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::libc::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
impl Clone for __Request__act_get_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::libc::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl Clone for __Request__act_set_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
impl Clone for __Request__thread_get_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl Clone for __Request__thread_set_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_suspend_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_resume_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_abort_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_abort_safely_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_depress_abort_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::libc::c_int,
}
impl Clone for __Request__thread_get_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::libc::c_int,
}
impl Clone for __Request__thread_set_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__thread_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl Clone for __Request__thread_set_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
impl Clone for __Request__thread_get_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl Clone for __Request__thread_swap_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
impl Clone for __Request__thread_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
impl Clone for __Request__thread_policy_set_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
impl Clone for __Request__thread_policy_get_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
impl Clone for __Request__thread_sample_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
impl Clone for __Request__etap_trace_thread_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
impl Clone for __Request__thread_assign_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_assign_default_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__thread_get_assignment_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
impl Clone for __Request__thread_set_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
impl Clone for __Request__thread_get_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Request__thread_set_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Request__thread_swap_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    _bindgen_union_align: [u32; 234usize],
}
impl Clone for __RequestUnion__thread_act_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_terminate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 224usize],
}
impl Clone for __Reply__act_get_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__act_set_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 224usize],
}
impl Clone for __Reply__thread_get_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_set_state_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_suspend_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_resume_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_abort_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_abort_safely_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_depress_abort_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__thread_get_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_set_special_port_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
impl Clone for __Reply__thread_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_set_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl Clone for __Reply__thread_get_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl Clone for __Reply__thread_swap_exception_ports_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_policy_set_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
impl Clone for __Reply__thread_policy_get_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_sample_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__etap_trace_thread_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_assign_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_assign_default_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__thread_get_assignment_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_set_policy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__thread_get_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__thread_set_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__thread_swap_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    _bindgen_union_align: [u32; 234usize],
}
impl Clone for __ReplyUnion__thread_act_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn vm_region(target_task: vm_map_t, address: *mut vm_address_t,
                     size: *mut vm_size_t, flavor: vm_region_flavor_t,
                     info: vm_region_info_t,
                     infoCnt: *mut mach_msg_type_number_t,
                     object_name: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate(target_task: vm_map_t, address: *mut vm_address_t,
                       size: vm_size_t, flags: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_deallocate(target_task: vm_map_t, address: vm_address_t,
                         size: vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_protect(target_task: vm_map_t, address: vm_address_t,
                      size: vm_size_t, set_maximum: boolean_t,
                      new_protection: vm_prot_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_inherit(target_task: vm_map_t, address: vm_address_t,
                      size: vm_size_t, new_inheritance: vm_inherit_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_read(target_task: vm_map_t, address: vm_address_t,
                   size: vm_size_t, data: *mut vm_offset_t,
                   dataCnt: *mut mach_msg_type_number_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_list(target_task: vm_map_t, data_list: *mut vm_read_entry,
                        count: natural_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_write(target_task: vm_map_t, address: vm_address_t,
                    data: vm_offset_t, dataCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_copy(target_task: vm_map_t, source_address: vm_address_t,
                   size: vm_size_t, dest_address: vm_address_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_read_overwrite(target_task: vm_map_t, address: vm_address_t,
                             size: vm_size_t, data: vm_address_t,
                             outsize: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_msync(target_task: vm_map_t, address: vm_address_t,
                    size: vm_size_t, sync_flags: vm_sync_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_behavior_set(target_task: vm_map_t, address: vm_address_t,
                           size: vm_size_t, new_behavior: vm_behavior_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_map(target_task: vm_map_t, address: *mut vm_address_t,
                  size: vm_size_t, mask: vm_address_t, flags: ::libc::c_int,
                  object: mem_entry_name_port_t, offset: vm_offset_t,
                  copy: boolean_t, cur_protection: vm_prot_t,
                  max_protection: vm_prot_t, inheritance: vm_inherit_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_machine_attribute(target_task: vm_map_t, address: vm_address_t,
                                size: vm_size_t,
                                attribute: vm_machine_attribute_t,
                                value: *mut vm_machine_attribute_val_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_remap(target_task: vm_map_t, target_address: *mut vm_address_t,
                    size: vm_size_t, mask: vm_address_t, flags: ::libc::c_int,
                    src_task: vm_map_t, src_address: vm_address_t,
                    copy: boolean_t, cur_protection: *mut vm_prot_t,
                    max_protection: *mut vm_prot_t, inheritance: vm_inherit_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry(target_task: vm_map_t, size: *mut vm_size_t,
                                  offset: vm_offset_t, permission: vm_prot_t,
                                  object_handle: *mut mem_entry_name_port_t,
                                  parent_entry: mem_entry_name_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_map_page_query(target_map: vm_map_t, offset: vm_offset_t,
                             disposition: *mut integer_t,
                             ref_count: *mut integer_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info(task: vm_map_t, address: vm_address_t,
                               region: *mut vm_info_region_t,
                               objects: *mut vm_info_object_array_t,
                               objectsCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_mapped_pages_info(task: vm_map_t,
                                pages: *mut page_address_array_t,
                                pagesCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse(target_task: vm_map_t,
                             address: *mut vm_address_t, size: *mut vm_size_t,
                             nesting_depth: *mut natural_t,
                             info: vm_region_recurse_info_t,
                             infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse_64(target_task: vm_map_t,
                                address: *mut vm_address_t,
                                size: *mut vm_size_t,
                                nesting_depth: *mut natural_t,
                                info: vm_region_recurse_info_t,
                                infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info_64(task: vm_map_t, address: vm_address_t,
                                  region: *mut vm_info_region_64_t,
                                  objects: *mut vm_info_object_array_t,
                                  objectsCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_region_64(target_task: vm_map_t, address: *mut vm_address_t,
                        size: *mut vm_size_t, flavor: vm_region_flavor_t,
                        info: vm_region_info_t,
                        infoCnt: *mut mach_msg_type_number_t,
                        object_name: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry_64(target_task: vm_map_t,
                                     size: *mut memory_object_size_t,
                                     offset: memory_object_offset_t,
                                     permission: vm_prot_t,
                                     object_handle: *mut mach_port_t,
                                     parent_entry: mem_entry_name_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn vm_map_64(target_task: vm_map_t, address: *mut vm_address_t,
                     size: vm_size_t, mask: vm_address_t,
                     flags: ::libc::c_int, object: mem_entry_name_port_t,
                     offset: memory_object_offset_t, copy: boolean_t,
                     cur_protection: vm_prot_t, max_protection: vm_prot_t,
                     inheritance: vm_inherit_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_purgable_control(target_task: vm_map_t, address: vm_address_t,
                               control: vm_purgable_t,
                               state: *mut ::libc::c_int) -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Request__vm_region_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::libc::c_int,
}
impl Clone for __Request__vm_allocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
impl Clone for __Request__vm_deallocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
impl Clone for __Request__vm_protect_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
impl Clone for __Request__vm_inherit_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
impl Clone for __Request__vm_read_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
impl Clone for __Request__vm_read_list_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl Clone for __Request__vm_write_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
impl Clone for __Request__vm_copy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
impl Clone for __Request__vm_read_overwrite_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
impl Clone for __Request__vm_msync_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
impl Clone for __Request__vm_behavior_set_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::libc::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
impl Clone for __Request__vm_map_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
impl Clone for __Request__vm_machine_attribute_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::libc::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
impl Clone for __Request__vm_remap_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
impl Clone for __Request__task_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
impl Clone for __Request__mach_make_memory_entry_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
impl Clone for __Request__vm_map_page_query_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
impl Clone for __Request__mach_vm_region_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__vm_mapped_pages_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Request__vm_region_recurse_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Request__vm_region_recurse_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
impl Clone for __Request__mach_vm_region_info_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Request__vm_region_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
impl Clone for __Request__mach_make_memory_entry_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::libc::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
impl Clone for __Request__vm_map_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::libc::c_int,
}
impl Clone for __Request__vm_purgable_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    _bindgen_union_align: [u32; 1033usize],
}
impl Clone for __RequestUnion__vm_map_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::libc::c_int; 10usize],
}
impl Clone for __Reply__vm_region_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl Clone for __Reply__vm_allocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_deallocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_protect_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_inherit_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__vm_read_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
impl Clone for __Reply__vm_read_list_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_write_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_copy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
impl Clone for __Reply__vm_read_overwrite_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_msync_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__vm_behavior_set_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl Clone for __Reply__vm_map_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
impl Clone for __Reply__vm_machine_attribute_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
impl Clone for __Reply__vm_remap_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_wire_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
impl Clone for __Reply__mach_make_memory_entry_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
impl Clone for __Reply__vm_map_page_query_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_vm_region_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__vm_mapped_pages_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::libc::c_int; 19usize],
}
impl Clone for __Reply__vm_region_recurse_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::libc::c_int; 19usize],
}
impl Clone for __Reply__vm_region_recurse_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_vm_region_info_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::libc::c_int; 10usize],
}
impl Clone for __Reply__vm_region_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
impl Clone for __Reply__mach_make_memory_entry_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl Clone for __Reply__vm_map_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::libc::c_int,
}
impl Clone for __Reply__vm_purgable_control_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    _bindgen_union_align: [u32; 1033usize],
}
impl Clone for __ReplyUnion__vm_map_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mach_port_names(task: ipc_space_t,
                           names: *mut mach_port_name_array_t,
                           namesCnt: *mut mach_msg_type_number_t,
                           types: *mut mach_port_type_array_t,
                           typesCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(task: ipc_space_t, name: mach_port_name_t,
                          ptype: *mut mach_port_type_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(task: ipc_space_t, old_name: mach_port_name_t,
                            new_name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(task: ipc_space_t,
                                   right: mach_port_right_t,
                                   name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(task: ipc_space_t, right: mach_port_right_t,
                              name: *mut mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(task: ipc_space_t, name: mach_port_name_t,
                              right: mach_port_right_t,
                              refs: *mut mach_port_urefs_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(task: ipc_space_t, name: mach_port_name_t,
                              right: mach_port_right_t,
                              delta: mach_port_delta_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(task: ipc_space_t, name: mach_port_name_t,
                          trailer_type: mach_msg_trailer_type_t,
                          request_seqnop: *mut mach_port_seqno_t,
                          msg_sizep: *mut mach_msg_size_t,
                          msg_idp: *mut mach_msg_id_t,
                          trailer_infop: mach_msg_trailer_info_t,
                          trailer_infopCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(task: ipc_space_t, name: mach_port_name_t,
                                 mscount: mach_port_mscount_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(task: ipc_space_t, name: mach_port_name_t,
                                    members: *mut mach_port_name_array_t,
                                    membersCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(task: ipc_space_t, member: mach_port_name_t,
                                 after: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(task: ipc_space_t,
                                          name: mach_port_name_t,
                                          msgid: mach_msg_id_t,
                                          sync: mach_port_mscount_t,
                                          notify: mach_port_t,
                                          notifyPoly: mach_msg_type_name_t,
                                          previous: *mut mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(task: ipc_space_t, name: mach_port_name_t,
                                  poly: mach_port_t,
                                  polyPoly: mach_msg_type_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(task: ipc_space_t, name: mach_port_name_t,
                                   msgt_name: mach_msg_type_name_t,
                                   poly: *mut mach_port_t,
                                   polyPoly: *mut mach_msg_type_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(task: ipc_space_t, name: mach_port_name_t,
                               seqno: mach_port_seqno_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(task: ipc_space_t, name: mach_port_name_t,
                                    flavor: mach_port_flavor_t,
                                    port_info_out: mach_port_info_t,
                                    port_info_outCnt:
                                        *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(task: ipc_space_t, name: mach_port_name_t,
                                    flavor: mach_port_flavor_t,
                                    port_info: mach_port_info_t,
                                    port_infoCnt: mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(task: ipc_space_t, right: mach_port_right_t,
                                  qos: *mut mach_port_qos_t,
                                  name: *mut mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(task: ipc_space_t,
                                   right: mach_port_right_t,
                                   proto: mach_port_t,
                                   qos: *mut mach_port_qos_t,
                                   name: *mut mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(task: ipc_space_t,
                               table_entries: ::libc::c_int) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(task: ipc_space_t, name: mach_port_name_t,
                                 srights: *mut mach_port_rights_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(task: ipc_space_t,
                                space_info: *mut ipc_info_space_t,
                                table_info: *mut ipc_info_name_array_t,
                                table_infoCnt: *mut mach_msg_type_number_t,
                                tree_info: *mut ipc_info_tree_name_array_t,
                                tree_infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(task: ipc_space_t, name: mach_port_name_t,
                                    dnr_total: *mut ::libc::c_uint,
                                    dnr_used: *mut ::libc::c_uint)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(task: ipc_space_t, name: mach_port_name_t,
                                   object_type: *mut ::libc::c_uint,
                                   object_addr: *mut ::libc::c_uint)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(task: ipc_space_t, name: mach_port_name_t,
                                   pset: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(task: ipc_space_t, name: mach_port_name_t,
                                    pset: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(task: ipc_space_t, name: mach_port_name_t,
                                 context: *mut mach_port_context_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(task: ipc_space_t, name: mach_port_name_t,
                                 context: mach_port_context_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(task: ipc_space_t, name: mach_port_name_t,
                             object_type: *mut natural_t,
                             object_addr: *mut mach_vm_address_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(task: ipc_space_t,
                               options: mach_port_options_ptr_t,
                               context: mach_port_context_t,
                               name: *mut mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(task: ipc_space_t, name: mach_port_name_t,
                              srdelta: mach_port_delta_t,
                              guard: mach_port_context_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(task: ipc_space_t, name: mach_port_name_t,
                           guard: mach_port_context_t, strict: boolean_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(task: ipc_space_t, name: mach_port_name_t,
                             guard: mach_port_context_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(task: ipc_space_t,
                                      basic_info: *mut ipc_info_space_basic_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__mach_port_names_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_type_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
impl Clone for __Request__mach_port_rename_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_allocate_name_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
impl Clone for __Request__mach_port_allocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_deallocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
impl Clone for __Request__mach_port_get_refs_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
impl Clone for __Request__mach_port_mod_refs_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
impl Clone for __Request__mach_port_peek_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
impl Clone for __Request__mach_port_set_mscount_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_get_set_status_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
impl Clone for __Request__mach_port_move_member_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
impl Clone for __Request__mach_port_request_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_insert_right_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
impl Clone for __Request__mach_port_extract_right_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
impl Clone for __Request__mach_port_set_seqno_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__mach_port_get_attributes_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
impl Clone for __Request__mach_port_set_attributes_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
impl Clone for __Request__mach_port_allocate_qos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_allocate_full_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::libc::c_int,
}
impl Clone for __Request__task_set_port_space_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_get_srights_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__mach_port_space_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_dnrequest_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_kernel_object_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
impl Clone for __Request__mach_port_insert_member_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
impl Clone for __Request__mach_port_extract_member_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_get_context_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
impl Clone for __Request__mach_port_set_context_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl Clone for __Request__mach_port_kobject_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
impl Clone for __Request__mach_port_construct_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
impl Clone for __Request__mach_port_destruct_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
impl Clone for __Request__mach_port_guard_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
impl Clone for __Request__mach_port_unguard_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__mach_port_space_basic_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    _bindgen_union_align: [u32; 28usize],
}
impl Clone for __RequestUnion__mach_port_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_port_names_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
impl Clone for __Reply__mach_port_type_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_rename_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_allocate_name_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
impl Clone for __Reply__mach_port_allocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_destroy_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_deallocate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
impl Clone for __Reply__mach_port_get_refs_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_mod_refs_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::libc::c_char; 68usize],
}
impl Clone for __Reply__mach_port_peek_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_set_mscount_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_port_get_set_status_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_move_member_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__mach_port_request_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_insert_right_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__mach_port_extract_right_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_set_seqno_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
impl Clone for __Reply__mach_port_get_attributes_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_set_attributes_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
impl Clone for __Reply__mach_port_allocate_qos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
impl Clone for __Reply__mach_port_allocate_full_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__task_set_port_space_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
impl Clone for __Reply__mach_port_get_srights_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_port_space_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::libc::c_uint,
    pub dnr_used: ::libc::c_uint,
}
impl Clone for __Reply__mach_port_dnrequest_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::libc::c_uint,
    pub object_addr: ::libc::c_uint,
}
impl Clone for __Reply__mach_port_kernel_object_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_insert_member_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_extract_member_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
impl Clone for __Reply__mach_port_get_context_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_set_context_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
impl Clone for __Reply__mach_port_kobject_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
impl Clone for __Reply__mach_port_construct_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_destruct_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_guard_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__mach_port_unguard_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
impl Clone for __Reply__mach_port_space_basic_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    _bindgen_union_align: [u32; 30usize],
}
impl Clone for __ReplyUnion__mach_port_subsystem {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "vm_page_size"]
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    #[link_name = "vm_page_mask"]
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    #[link_name = "vm_page_shift"]
    pub static mut vm_page_shift: ::libc::c_int;
}
extern "C" {
    #[link_name = "vm_kernel_page_size"]
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    #[link_name = "vm_kernel_page_mask"]
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    #[link_name = "vm_kernel_page_shift"]
    pub static mut vm_kernel_page_shift: ::libc::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t)
     -> kern_return_t;
}
extern "C" {
    #[link_name = "mach_task_self_"]
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(clock_name: mach_port_name_t,
                            sleep_type: sleep_type_t,
                            sleep_sec: ::libc::c_int,
                            sleep_nsec: ::libc::c_int,
                            wakeup_time: *mut mach_timespec_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(target: mach_port_name_t,
                                            addr: *mut mach_vm_offset_t,
                                            size: mach_vm_size_t,
                                            flags: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(target: mach_port_name_t,
                                              address: mach_vm_address_t,
                                              size: mach_vm_size_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(target: mach_port_name_t,
                                           address: mach_vm_address_t,
                                           size: mach_vm_size_t,
                                           set_maximum: boolean_t,
                                           new_protection: vm_prot_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(target: mach_port_name_t,
                                       address: *mut mach_vm_offset_t,
                                       size: mach_vm_size_t,
                                       mask: mach_vm_offset_t,
                                       flags: ::libc::c_int,
                                       cur_protection: vm_prot_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(target: mach_port_name_t,
                                              right: mach_port_right_t,
                                              name: *mut mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destroy_trap(target: mach_port_name_t,
                                             name: mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(target: mach_port_name_t,
                                                name: mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(target: mach_port_name_t,
                                              name: mach_port_name_t,
                                              right: mach_port_right_t,
                                              delta: mach_port_delta_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(target: mach_port_name_t,
                                                 member: mach_port_name_t,
                                                 after: mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(target: mach_port_name_t,
                                                  name: mach_port_name_t,
                                                  poly: mach_port_name_t,
                                                  polyPoly:
                                                      mach_msg_type_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(target: mach_port_name_t,
                                                   name: mach_port_name_t,
                                                   pset: mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(target: mach_port_name_t,
                                                    name: mach_port_name_t,
                                                    pset: mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(target: mach_port_name_t,
                                               options:
                                                   *mut mach_port_options_t,
                                               context: u64,
                                               name: *mut mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(target: mach_port_name_t,
                                              name: mach_port_name_t,
                                              srdelta: mach_port_delta_t,
                                              guard: u64) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(target: mach_port_name_t,
                                           name: mach_port_name_t, guard: u64,
                                           strict: boolean_t)
     -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(target: mach_port_name_t,
                                             name: mach_port_name_t,
                                             guard: u64) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(filename: u64, flags: ::libc::c_int,
                       size: ::libc::c_int, priority: ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::libc::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(hi_water: ::libc::c_int, low_water: ::libc::c_int,
                         flags: ::libc::c_int, alert_port: mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::libc::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::libc::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(thread_name: mach_port_name_t, option: ::libc::c_int,
                         option_time: mach_msg_timeout_t) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn task_for_pid(target_tport: mach_port_name_t, pid: ::libc::c_int,
                        t: *mut mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(target_tport: mach_port_name_t,
                             pid: ::libc::c_int, tn: *mut mach_port_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::libc::c_int)
     -> kern_return_t;
}
extern "C" {
    #[link_name = "bootstrap_port"]
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    #[link_name = "vprintf_stderr_func"]
    pub static mut vprintf_stderr_func:
               ::std::option::Option<unsafe extern "C" fn(format:
                                                              *const ::libc::c_char,
                                                          ap:
                                                              *mut __va_list_tag)
                                         -> ::libc::c_int>;
}
extern "C" {
    pub fn host_info(host: host_t, flavor: host_flavor_t,
                     host_info_out: host_info_t,
                     host_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_kernel_version(host: host_t,
                               kernel_version: *mut ::libc::c_char)
     -> kern_return_t;
}
extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry(host: host_t, internal: boolean_t,
                                           size: vm_size_t,
                                           permission: vm_prot_t,
                                           pager: memory_object_t,
                                           entry_handle: *mut mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_processor_info(host: host_t, flavor: processor_flavor_t,
                               out_processor_count: *mut natural_t,
                               out_processor_info:
                                   *mut processor_info_array_t,
                               out_processor_infoCnt:
                                   *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_io_master(host: host_t, io_master: *mut io_master_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_service(host: host_t, clock_id: clock_id_t,
                                  clock_serv: *mut clock_serv_t)
     -> kern_return_t;
}
extern "C" {
    pub fn kmod_get_info(host: host_t, modules: *mut kmod_args_t,
                         modulesCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_zone_info(host: host_priv_t, names: *mut zone_name_array_t,
                          namesCnt: *mut mach_msg_type_number_t,
                          info: *mut zone_info_array_t,
                          infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_virtual_physical_table_info(host: host_t,
                                            info:
                                                *mut hash_info_bucket_array_t,
                                            infoCnt:
                                                *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_default(host: host_t,
                                 default_set: *mut processor_set_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn processor_set_create(host: host_t, new_set: *mut processor_set_t,
                                new_name: *mut processor_set_name_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry_64(host: host_t,
                                              internal: boolean_t,
                                              size: memory_object_size_t,
                                              permission: vm_prot_t,
                                              pager: memory_object_t,
                                              entry_handle: *mut mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_statistics(host_priv: host_t, flavor: host_flavor_t,
                           host_info_out: host_info_t,
                           host_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_request_notification(host: host_t, notify_type: host_flavor_t,
                                     notify_port: mach_port_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_lockgroup_info(host: host_t,
                               lockgroup_info: *mut lockgroup_info_array_t,
                               lockgroup_infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_statistics64(host_priv: host_t, flavor: host_flavor_t,
                             host_info64_out: host_info64_t,
                             host_info64_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info(host: host_priv_t,
                          names: *mut mach_zone_name_array_t,
                          namesCnt: *mut mach_msg_type_number_t,
                          info: *mut mach_zone_info_array_t,
                          infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_create_mach_voucher(host: host_t,
                                    recipes:
                                        mach_voucher_attr_raw_recipe_array_t,
                                    recipesCnt: mach_msg_type_number_t,
                                    voucher: *mut ipc_voucher_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_register_mach_voucher_attr_manager(host: host_t,
                                                   attr_manager:
                                                       mach_voucher_attr_manager_t,
                                                   default_value:
                                                       mach_voucher_attr_value_handle_t,
                                                   new_key:
                                                       *mut mach_voucher_attr_key_t,
                                                   new_attr_control:
                                                       *mut ipc_voucher_attr_control_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(host: host_t,
                                                              attr_manager:
                                                                  mach_voucher_attr_manager_t,
                                                              default_value:
                                                                  mach_voucher_attr_value_handle_t,
                                                              key:
                                                                  mach_voucher_attr_key_t,
                                                              new_attr_control:
                                                                  *mut ipc_voucher_attr_control_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_set_atm_diagnostic_flag(host_priv: host_priv_t,
                                        diagnostic_flag: u32)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t,
                                        diagnostic_flag: *mut u32)
     -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_info(host: host_priv_t,
                            names: *mut mach_zone_name_array_t,
                            namesCnt: *mut mach_msg_type_number_t,
                            info: *mut mach_zone_info_array_t,
                            infoCnt: *mut mach_msg_type_number_t,
                            memory_info: *mut mach_memory_info_array_t,
                            memory_infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
}
extern "C" {
    pub fn host_set_multiuser_config_flags(host_priv: host_priv_t,
                                           multiuser_flags: u32)
     -> kern_return_t;
}
extern "C" {
    pub fn host_get_multiuser_config_flags(host: host_t,
                                           multiuser_flags: *mut u32)
     -> kern_return_t;
}
extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__host_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_kernel_version_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request___host_page_size_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
impl Clone for __Request__mach_memory_object_memory_entry_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
impl Clone for __Request__host_processor_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_io_master_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_get_io_master_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
impl Clone for __Request__host_get_clock_service_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__kmod_get_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_zone_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_zone_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_virtual_physical_table_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_set_default_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__processor_set_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
impl Clone for __Request__mach_memory_object_memory_entry_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__host_statistics_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
impl Clone for __Request__host_request_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_lockgroup_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
impl Clone for __Request__host_statistics64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__mach_zone_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
impl Clone for __Request__host_create_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
impl Clone for __Request__host_register_mach_voucher_attr_manager_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
impl Clone for __Request__host_register_well_known_mach_voucher_attr_manager_t
 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
impl Clone for __Request__host_set_atm_diagnostic_flag_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_get_atm_diagnostic_flag_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__mach_memory_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
impl Clone for __Request__host_set_multiuser_config_flags_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_get_multiuser_config_flags_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
impl Clone for __Request__host_check_multiuser_mode_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_master: __Request__host_get_io_master_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_zone_info: __Request__host_zone_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager: __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager: __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    _bindgen_union_align: [u32; 1289usize],
}
impl Clone for __RequestUnion__mach_host_subsystem {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
impl Clone for __Reply__host_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::libc::c_char; 512usize],
}
impl Clone for __Reply__host_kernel_version_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
impl Clone for __Reply___host_page_size_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__mach_memory_object_memory_entry_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__host_processor_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_io_master_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_master: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_get_io_master_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_get_clock_service_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__kmod_get_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__host_zone_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__host_virtual_physical_table_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__processor_set_default_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__processor_set_create_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__mach_memory_object_memory_entry_64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
impl Clone for __Reply__host_statistics_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_request_notification_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__host_lockgroup_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
impl Clone for __Reply__host_statistics64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_zone_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_create_mach_voucher_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
impl Clone for __Reply__host_register_mach_voucher_attr_manager_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
impl Clone for __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_set_atm_diagnostic_flag_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
impl Clone for __Reply__host_get_atm_diagnostic_flag_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
impl Clone for __Reply__mach_memory_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl Clone for __Reply__host_set_multiuser_config_flags_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
impl Clone for __Reply__host_get_multiuser_config_flags_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
impl Clone for __Reply__host_check_multiuser_mode_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_master: __Reply__host_get_io_master_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_zone_info: __Reply__host_zone_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager: __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager: __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    _bindgen_union_align: [u32; 266usize],
}
impl Clone for __ReplyUnion__mach_host_subsystem {
    fn clone(&self) -> Self { *self }
}
pub type routine_arg_type = ::libc::c_uint;
pub type routine_arg_offset = ::libc::c_uint;
pub type routine_arg_size = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
impl Clone for rpc_routine_arg_descriptor {
    fn clone(&self) -> Self { *self }
}
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Copy)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::libc::c_uint,
    pub descr_count: ::libc::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::libc::c_uint,
}
impl Clone for rpc_routine_descriptor {
    fn clone(&self) -> Self { *self }
}
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Copy)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
impl Clone for rpc_signature {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct rpc_subsystem {
    pub reserved: *mut ::libc::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::libc::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
impl Clone for rpc_subsystem {
    fn clone(&self) -> Self { *self }
}
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t =
    ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
extern "C" {
    pub fn mach_error_string(error_value: mach_error_t)
     -> *mut ::libc::c_char;
}
extern "C" {
    pub fn mach_error(str: *const ::libc::c_char, error_value: mach_error_t);
}
extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
extern "C" {
    pub fn panic(arg1: *const ::libc::c_char, ...);
}
extern "C" {
    pub fn safe_gets(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                     arg3: ::libc::c_int);
}
extern "C" {
    pub fn slot_name(arg1: cpu_type_t, arg2: cpu_subtype_t,
                     arg3: *mut *mut ::libc::c_char,
                     arg4: *mut *mut ::libc::c_char);
}
extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t,
                           arg2: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t)
     -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_once(arg1:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut mach_msg_header_t,
                                                                               arg2:
                                                                                   *mut mach_msg_header_t)
                                                              -> boolean_t>,
                                arg2: mach_msg_size_t, arg3: mach_port_t,
                                arg4: mach_msg_options_t)
     -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server(arg1:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut mach_msg_header_t,
                                                                          arg2:
                                                                              *mut mach_msg_header_t)
                                                         -> boolean_t>,
                           arg2: mach_msg_size_t, arg3: mach_port_t,
                           arg4: mach_msg_options_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_importance(arg1:
                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         *mut mach_msg_header_t,
                                                                                     arg2:
                                                                                         *mut mach_msg_header_t)
                                                                    ->
                                                                        boolean_t>,
                                      arg2: mach_msg_size_t,
                                      arg3: mach_port_t,
                                      arg4: mach_msg_options_t)
     -> mach_msg_return_t;
}
extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t)
     -> kern_return_t;
}
extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t)
     -> kern_return_t;
}
extern "C" {
    pub fn clock_sleep(arg1: mach_port_t, arg2: ::libc::c_int,
                       arg3: mach_timespec_t, arg4: *mut mach_timespec_t)
     -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t)
     -> voucher_mach_msg_state_t;
}
extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
